const l=JSON.parse(`{"key":"v-f98b864a","path":"/18Data_Structure/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95108/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%951-15.html","title":"HJ1 字符串最后一个单词的长度","lang":"zh-CN","frontmatter":{"description":"HJ1 字符串最后一个单词的长度 描述 计算字符串最后一个单词的长度，单词以空格隔开，字符串长度小于5000。（注：字符串末尾不以空格为结尾） 输入描述： 输入一行，代表要计算的字符串，非空，长度小于5000。 输出描述： 输出一个整数，表示输入字符串最后一个单词的长度。 方法一 #include&lt;iostream&gt; #include&lt;string&gt; using namespace std; int main() { string s; getline(cin, s); int ans=0, i=s.length()-1; while(i&gt;=0 &amp;&amp; s[i]!=' ') { i--; ans++; } cout&lt;&lt;ans; return 0; }","head":[["meta",{"property":"og:url","content":"https://tobeprozy.github.io/18Data_Structure/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95108/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%951-15.html"}],["meta",{"property":"og:site_name","content":"南叔先生-开源笔记"}],["meta",{"property":"og:title","content":"HJ1 字符串最后一个单词的长度"}],["meta",{"property":"og:description","content":"HJ1 字符串最后一个单词的长度 描述 计算字符串最后一个单词的长度，单词以空格隔开，字符串长度小于5000。（注：字符串末尾不以空格为结尾） 输入描述： 输入一行，代表要计算的字符串，非空，长度小于5000。 输出描述： 输出一个整数，表示输入字符串最后一个单词的长度。 方法一 #include&lt;iostream&gt; #include&lt;string&gt; using namespace std; int main() { string s; getline(cin, s); int ans=0, i=s.length()-1; while(i&gt;=0 &amp;&amp; s[i]!=' ') { i--; ans++; } cout&lt;&lt;ans; return 0; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-26T10:25:41.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-26T10:25:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"HJ1 字符串最后一个单词的长度\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-04-26T10:25:41.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"描述","slug":"描述","link":"#描述","children":[{"level":3,"title":"输入描述：","slug":"输入描述","link":"#输入描述","children":[]},{"level":3,"title":"输出描述：","slug":"输出描述","link":"#输出描述","children":[]}]},{"level":2,"title":"方法一","slug":"方法一","link":"#方法一","children":[]},{"level":2,"title":"方法二","slug":"方法二","link":"#方法二","children":[]},{"level":2,"title":"描述","slug":"描述-1","link":"#描述-1","children":[{"level":3,"title":"输入描述：","slug":"输入描述-1","link":"#输入描述-1","children":[]},{"level":3,"title":"输出描述：","slug":"输出描述-1","link":"#输出描述-1","children":[]}]},{"level":2,"title":"方法一：哈希表","slug":"方法一-哈希表","link":"#方法一-哈希表","children":[]},{"level":2,"title":"方法二：遍历统计法","slug":"方法二-遍历统计法","link":"#方法二-遍历统计法","children":[]},{"level":2,"title":"描述","slug":"描述-2","link":"#描述-2","children":[{"level":3,"title":"输入描述：","slug":"输入描述-2","link":"#输入描述-2","children":[]},{"level":3,"title":"输出描述：","slug":"输出描述-2","link":"#输出描述-2","children":[]}]},{"level":2,"title":"方法一：暴力排序去重","slug":"方法一-暴力排序去重","link":"#方法一-暴力排序去重","children":[]},{"level":2,"title":"方法二：有序集合","slug":"方法二-有序集合","link":"#方法二-有序集合","children":[]},{"level":2,"title":"描述","slug":"描述-3","link":"#描述-3","children":[{"level":3,"title":"输入描述：","slug":"输入描述-3","link":"#输入描述-3","children":[]},{"level":3,"title":"输出描述：","slug":"输出描述-3","link":"#输出描述-3","children":[]}]},{"level":2,"title":"描述","slug":"描述-4","link":"#描述-4","children":[{"level":3,"title":"输入描述：","slug":"输入描述-4","link":"#输入描述-4","children":[]},{"level":3,"title":"输出描述：","slug":"输出描述-4","link":"#输出描述-4","children":[]}]},{"level":2,"title":"方法一：遍历转换","slug":"方法一-遍历转换","link":"#方法一-遍历转换","children":[]},{"level":2,"title":"方法二：流输入输出的格式化","slug":"方法二-流输入输出的格式化","link":"#方法二-流输入输出的格式化","children":[]},{"level":2,"title":"描述","slug":"描述-5","link":"#描述-5","children":[{"level":3,"title":"输入描述：","slug":"输入描述-5","link":"#输入描述-5","children":[]},{"level":3,"title":"输出描述：","slug":"输出描述-5","link":"#输出描述-5","children":[]}]},{"level":2,"title":"方法一：迭代","slug":"方法一-迭代","link":"#方法一-迭代","children":[]},{"level":2,"title":"方法二：递归","slug":"方法二-递归","link":"#方法二-递归","children":[]},{"level":2,"title":"描述","slug":"描述-6","link":"#描述-6","children":[{"level":3,"title":"输入描述：","slug":"输入描述-6","link":"#输入描述-6","children":[]},{"level":3,"title":"输出描述：","slug":"输出描述-6","link":"#输出描述-6","children":[]}]},{"level":2,"title":"方法一：比较判断法","slug":"方法一-比较判断法","link":"#方法一-比较判断法","children":[]},{"level":2,"title":"方法二：强制类型转换","slug":"方法二-强制类型转换","link":"#方法二-强制类型转换","children":[]},{"level":2,"title":"描述","slug":"描述-7","link":"#描述-7","children":[{"level":3,"title":"输入描述：","slug":"输入描述-7","link":"#输入描述-7","children":[]},{"level":3,"title":"输出描述：","slug":"输出描述-7","link":"#输出描述-7","children":[]}]},{"level":2,"title":"方法一：桶排序（空间溢出）","slug":"方法一-桶排序-空间溢出","link":"#方法一-桶排序-空间溢出","children":[]},{"level":2,"title":"方法二：红黑树","slug":"方法二-红黑树","link":"#方法二-红黑树","children":[]},{"level":2,"title":"方法三","slug":"方法三","link":"#方法三","children":[]},{"level":2,"title":"描述","slug":"描述-8","link":"#描述-8","children":[{"level":3,"title":"输入描述：","slug":"输入描述-8","link":"#输入描述-8","children":[]},{"level":3,"title":"输出描述：","slug":"输出描述-8","link":"#输出描述-8","children":[]}]},{"level":2,"title":"描述","slug":"描述-9","link":"#描述-9","children":[{"level":3,"title":"输入描述：","slug":"输入描述-9","link":"#输入描述-9","children":[]},{"level":3,"title":"输出描述：","slug":"输出描述-9","link":"#输出描述-9","children":[]}]},{"level":2,"title":"方法一：使用数组记录每种字符是否已经出现 (哈希表思想)","slug":"方法一-使用数组记录每种字符是否已经出现-哈希表思想","link":"#方法一-使用数组记录每种字符是否已经出现-哈希表思想","children":[]},{"level":2,"title":"方法二：使用集合来统计（同样是哈希表的思想）","slug":"方法二-使用集合来统计-同样是哈希表的思想","link":"#方法二-使用集合来统计-同样是哈希表的思想","children":[]},{"level":2,"title":"描述","slug":"描述-10","link":"#描述-10","children":[{"level":3,"title":"输入描述：","slug":"输入描述-10","link":"#输入描述-10","children":[]},{"level":3,"title":"输出描述：","slug":"输出描述-10","link":"#输出描述-10","children":[]}]},{"level":2,"title":"方法一：转换为字符串","slug":"方法一-转换为字符串","link":"#方法一-转换为字符串","children":[]},{"level":2,"title":"方法二：数学方法转换","slug":"方法二-数学方法转换","link":"#方法二-数学方法转换","children":[]},{"level":2,"title":"描述","slug":"描述-11","link":"#描述-11","children":[{"level":3,"title":"输入描述：","slug":"输入描述-11","link":"#输入描述-11","children":[]},{"level":3,"title":"输出描述：","slug":"输出描述-11","link":"#输出描述-11","children":[]}]},{"level":2,"title":"方法一：逆序拼接","slug":"方法一-逆序拼接","link":"#方法一-逆序拼接","children":[]},{"level":2,"title":"方法二：双指针交换","slug":"方法二-双指针交换","link":"#方法二-双指针交换","children":[]},{"level":2,"title":"方法三：反转函数","slug":"方法三-反转函数","link":"#方法三-反转函数","children":[]},{"level":2,"title":"描述","slug":"描述-12","link":"#描述-12","children":[{"level":3,"title":"输入描述：","slug":"输入描述-12","link":"#输入描述-12","children":[]},{"level":3,"title":"输出描述：","slug":"输出描述-12","link":"#输出描述-12","children":[]}]},{"level":2,"title":"方法一","slug":"方法一-1","link":"#方法一-1","children":[]},{"level":2,"title":"方法二：两次反转","slug":"方法二-两次反转","link":"#方法二-两次反转","children":[]},{"level":2,"title":"方法二：分割字符串+栈","slug":"方法二-分割字符串-栈","link":"#方法二-分割字符串-栈","children":[]},{"level":2,"title":"方法三：输入时反向拼接","slug":"方法三-输入时反向拼接","link":"#方法三-输入时反向拼接","children":[]},{"level":2,"title":"描述","slug":"描述-13","link":"#描述-13","children":[{"level":3,"title":"输入描述：","slug":"输入描述-13","link":"#输入描述-13","children":[]},{"level":3,"title":"输出描述：","slug":"输出描述-13","link":"#输出描述-13","children":[]}]},{"level":2,"title":"方法一：冒泡排序","slug":"方法一-冒泡排序","link":"#方法一-冒泡排序","children":[]},{"level":2,"title":"方法二：堆排序","slug":"方法二-堆排序","link":"#方法二-堆排序","children":[]},{"level":2,"title":"方法三：库函数快排","slug":"方法三-库函数快排","link":"#方法三-库函数快排","children":[]},{"level":2,"title":"方法四：有序集合","slug":"方法四-有序集合","link":"#方法四-有序集合","children":[]},{"level":2,"title":"方法五：归并排序","slug":"方法五-归并排序","link":"#方法五-归并排序","children":[]},{"level":2,"title":"描述","slug":"描述-14","link":"#描述-14","children":[{"level":3,"title":"输入描述：","slug":"输入描述-14","link":"#输入描述-14","children":[]},{"level":3,"title":"输出描述：","slug":"输出描述-14","link":"#输出描述-14","children":[]}]},{"level":2,"title":"方法一：转化二进制","slug":"方法一-转化二进制","link":"#方法一-转化二进制","children":[]},{"level":2,"title":"方法二：移位运算","slug":"方法二-移位运算","link":"#方法二-移位运算","children":[]},{"level":2,"title":"方法三：用位与去掉二进制末尾1","slug":"方法三-用位与去掉二进制末尾1","link":"#方法三-用位与去掉二进制末尾1","children":[]},{"level":2,"title":"续[[华为机试16-30]]","slug":"续-华为机试16-30","link":"#续-华为机试16-30","children":[]}],"git":{"createdTime":1682504741000,"updatedTime":1682504741000,"contributors":[{"name":"tobeprozy","email":"904762096@qq.com","commits":1}]},"readingTime":{"minutes":17.84,"words":5351},"filePathRelative":"18Data_Structure/数据结构编程练习/华为机试108/华为机试1-15.md","localizedDate":"2023年4月26日","excerpt":"<h1> HJ1 字符串最后一个单词的长度</h1>\\n<h2> 描述</h2>\\n<p>计算字符串最后一个单词的长度，单词以空格隔开，字符串长度小于5000。（注：字符串末尾不以空格为结尾）</p>\\n<h3> 输入描述：</h3>\\n<p>输入一行，代表要计算的字符串，非空，长度小于5000。</p>\\n<h3> 输出描述：</h3>\\n<p>输出一个整数，表示输入字符串最后一个单词的长度。</p>\\n<h2> 方法一</h2>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;string&gt;</span></span>\\n \\n<span class=\\"token keyword\\">using</span> <span class=\\"token keyword\\">namespace</span> std<span class=\\"token punctuation\\">;</span>\\n \\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    string s<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">getline</span><span class=\\"token punctuation\\">(</span>cin<span class=\\"token punctuation\\">,</span> s<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">int</span> ans<span class=\\"token operator\\">=</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> i<span class=\\"token operator\\">=</span>s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">length</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">while</span><span class=\\"token punctuation\\">(</span>i<span class=\\"token operator\\">&gt;=</span><span class=\\"token number\\">0</span> <span class=\\"token operator\\">&amp;&amp;</span> s<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">!=</span><span class=\\"token char\\">' '</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        i<span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">;</span>\\n        ans<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    cout<span class=\\"token operator\\">&lt;&lt;</span>ans<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{l as data};
