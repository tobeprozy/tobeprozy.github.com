import{_ as n,Y as s,Z as a,a2 as t}from"./framework-d651fda7.js";const p={},o=t(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>string相关函数</p></div><h1 id="string相关函数" tabindex="-1"><a class="header-anchor" href="#string相关函数" aria-hidden="true">#</a> string相关函数</h1><h1 id="c-标准库一共包含-33-个c-头文件" tabindex="-1"><a class="header-anchor" href="#c-标准库一共包含-33-个c-头文件" aria-hidden="true">#</a> C++ 标准库一共包含 33 个C++ 头文件：</h1><div class="hint-container tip"><p class="hint-container-title">提示</p><p><strong>&lt; algorithm &gt;</strong>, &lt; bitset &gt;, &lt; complex &gt;, <strong>&lt; deque &gt;</strong>, &lt; exception &gt;,  &lt; fstream &gt;,  &lt; functional &gt;, &lt; iomanip &gt;, &lt; ios &gt;, &lt; iosfwd &gt;, &lt; iostream &gt;, &lt; istream &gt;, &lt; iterator &gt;,  &lt; limits &gt;,  <strong>&lt; list &gt;</strong>, &lt; locale &gt;, <strong>&lt; map &gt;</strong>, &lt; memory &gt;, &lt; new &gt;, &lt; numeric &gt;, &lt; ostream &gt;, <strong>&lt; queue &gt;, &lt; set &gt;,</strong> &lt; sstream &gt;, &lt; stack &gt;, &lt; stdexcept &gt;, &lt; streambuf &gt;, <strong>&lt; string &gt;</strong>, &lt; strstream &gt;,  &lt; typeinfo &gt;,  &lt; utility &gt;, &lt; valarray &gt;, <strong>&lt; vector &gt;</strong></p></div><h1 id="初始化方式" tabindex="-1"><a class="header-anchor" href="#初始化方式" aria-hidden="true">#</a> <strong>初始化方式</strong></h1><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token operator">*</span><span class="token operator">*</span>The most common variants are also the simplest<span class="token operator">:</span><span class="token operator">*</span><span class="token operator">*</span>
string s0<span class="token punctuation">;</span> <span class="token comment">// the empty string</span>
string s1 <span class="token punctuation">{</span><span class="token string">&quot;As simple as that!&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// construct from C-style string</span>
string s2 <span class="token punctuation">{</span>s1<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// copy constr uctor</span>

<span class="token operator">*</span><span class="token operator">*</span>Almost always<span class="token punctuation">,</span> the destructor is implicitly invoked<span class="token punctuation">.</span>
There is no string constructor that takes only a number of elements<span class="token operator">:</span><span class="token operator">*</span><span class="token operator">*</span>

string s3 <span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// error : no string(int)</span>
string s4 <span class="token punctuation">{</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// error : no string(char)</span>
string s5 <span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// OK: 7 &#39;a&#39;s</span>
string s6 <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// danger : passing nullptr</span>

<span class="token operator">*</span><span class="token operator">*</span>The declaration of s6 shows a mistake sometimes made by programmers used to C<span class="token operator">-</span>style strings<span class="token operator">:</span><span class="token operator">*</span><span class="token operator">*</span>
<span class="token keyword">const</span> <span class="token keyword">char</span>∗ p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// set p to ‘‘no string’’</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="基本函数" tabindex="-1"><a class="header-anchor" href="#基本函数" aria-hidden="true">#</a> 基本<strong>函数</strong></h1><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>n<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//n is the number of characters in s</span>
n<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//n=s.size()</span>
n<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//n is the largest possible value of s.size()</span>
s<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>c<span class="token punctuation">)</span> <span class="token comment">//Make s.size()==n; added elements get the value c</span>
s<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token comment">//s.resiz e(n,C{})</span>
s<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token comment">//重新设定字符串的内存空间,nSize大于size时才生效.</span>
n<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//s can hold n characters without further allocation</span>
	
	string s1<span class="token operator">=</span><span class="token string">&quot;def&quot;</span><span class="token punctuation">;</span>
    string s2<span class="token operator">=</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>
    s2<span class="token operator">=</span>s1<span class="token operator">+</span>s2<span class="token punctuation">;</span><span class="token comment">//&quot;defabc&quot;</span>
    cout<span class="token operator">&lt;&lt;</span>s2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//6</span>
    cout<span class="token operator">&lt;&lt;</span>s2<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//15**</span>

s<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Make s empty
s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Is s empty<span class="token operator">?</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>s<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//s[0]</span>
s<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//s[s.size()-1]</span>
s<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">//Append the character c</span>
s<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//Remove the last character from s: s.erase(s.size()ï1)</span>
s<span class="token operator">+=</span>x <span class="token comment">//Append x at the end of s; x can be a character, a string,a C-style string, or an initializer_list&lt;char_type&gt;</span>
s<span class="token operator">=</span>s1<span class="token operator">+</span>s2 <span class="token comment">//Concatenation: optimized version of s=s1; s+=s2;</span>
		
	string s1<span class="token operator">=</span><span class="token string">&quot;def&quot;</span><span class="token punctuation">;</span>
    string s2<span class="token operator">=</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>
    s2<span class="token operator">=</span>s1<span class="token operator">+</span>s2<span class="token punctuation">;</span><span class="token comment">//&quot;defabc&quot;</span>
		
n2<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span>n<span class="token punctuation">,</span>pos<span class="token punctuation">)</span> <span class="token comment">//s gets the characters from s2[pos:n)]</span>
n2<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token comment">//s gets all the characters from s2; n=s.copy(s2,n,0)</span>

s<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token comment">//Exchange the values of s and s2; noexcept</span>
<span class="token function">swap</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>s2<span class="token punctuation">)</span> <span class="token comment">//s.swap(s2)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">getline</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span>s<span class="token punctuation">,</span>d<span class="token punctuation">)</span> <span class="token comment">//Read characters from in into s until the character,d is encountered; d is removed from in but not appended to s</span>
<span class="token function">getline</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span>s<span class="token punctuation">)</span> <span class="token comment">//getline(in,s,&#39;\\n&#39;) where &#39;\\n&#39; is widened to match the string’s character type</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>可以利用vector循环读入</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> lines<span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>string s<span class="token punctuation">;</span> <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
	lines<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="格式转换" tabindex="-1"><a class="header-anchor" href="#格式转换" aria-hidden="true">#</a> 格式转换：</h1><p>🪁 <strong>stoi(str, 0, 2); //将字符串 str 从 0 位置之后的数字的 2 进制数，转换为十进制</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>x<span class="token operator">=</span><span class="token function">stoi</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>p<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token comment">//String to int; x is an integer; read starting with s[0]，if p!=nullptr, ∗p is set to the number of characters used for x;b is the base of the number (between 2 and 36, inclusive)</span>
x<span class="token operator">=</span><span class="token function">stoi</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>p<span class="token punctuation">)</span> <span class="token comment">//x=stoi(s,p,10); decimal numbers</span>
x<span class="token operator">=</span><span class="token function">stoi</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment">//x=stoi(s,nullptr,10); decimal numbers; don’t report the character count</span>
x<span class="token operator">=</span><span class="token function">stol</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>p<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token comment">//String to long</span>
x<span class="token operator">=</span><span class="token function">stoul</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>p<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token comment">//String to unsigned long</span>
x<span class="token operator">=</span><span class="token function">stoll</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>p<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token comment">//String to long long</span>
x<span class="token operator">=</span><span class="token function">stoull</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>p<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token comment">//String to unsigned long long</span>
x<span class="token operator">=</span><span class="token function">stof</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>p<span class="token punctuation">)</span> <span class="token comment">//String to float</span>
x<span class="token operator">=</span><span class="token function">stod</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>p<span class="token punctuation">)</span> <span class="token comment">//String to double</span>
x<span class="token operator">=</span><span class="token function">stold</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>p<span class="token punctuation">)</span> <span class="token comment">//String to long double</span>
s<span class="token operator">=</span><span class="token function">to_string</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">//s is a string representation of x; x must be an integer or floating-point value</span>

		string s <span class="token operator">=</span> <span class="token string">&quot;123.45&quot;</span><span class="token punctuation">;</span>
		<span class="token keyword">auto</span> x1 <span class="token operator">=</span> <span class="token function">stoi</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// x1 = 123</span>
		<span class="token keyword">auto</span> x2 <span class="token operator">=</span> <span class="token function">stod</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// x2 = 123.45</span>
		<span class="token keyword">auto</span> x5 <span class="token operator">=</span> <span class="token function">stoi</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// x5 = 149</span>
		<span class="token keyword">auto</span> x6 <span class="token operator">=</span> <span class="token function">stoi</span><span class="token punctuation">(</span>s4<span class="token punctuation">,</span><span class="token keyword">nullptr</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// x6 = 149</span>
		<span class="token keyword">auto</span> x7 <span class="token operator">=</span> <span class="token function">stoi</span><span class="token punctuation">(</span>s4<span class="token punctuation">,</span><span class="token keyword">nullptr</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// x7 = 12=1*(8+4</span>
		<span class="token keyword">auto</span> x8 <span class="token operator">=</span> <span class="token function">stoi</span><span class="token punctuation">(</span>s4<span class="token punctuation">,</span><span class="token keyword">nullptr</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// x8 = 5279=15+9*16+4*16*16+1*16*16*16</span>

<span class="token comment">//stoi()函数如果传入的字符串s中含有不是数字的字符，则只会识别到从开头到第一个非法字符之 前，如果第一个字符就是非法字符则会报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="插入函数" tabindex="-1"><a class="header-anchor" href="#插入函数" aria-hidden="true">#</a> 插入函数</h1><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">//Append x at the end of s; x can be a character, a string,a C-style string, or an initializer_list&lt;char_type&gt;</span>
s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">)</span> <span class="token comment">//Append [b:e) at the end of s</span>
s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span>pos<span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token comment">//Append s2[pos:pos+n) to the end of s</span>
s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token comment">//Append the characters [p:p+n) to the end of s; p is a C-style string</span>
s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>c<span class="token punctuation">)</span> <span class="token comment">//Append n copies of character c to the end of s</span>
s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span>x<span class="token punctuation">)</span> <span class="token comment">//Insert x before s[pos]; x can be a character, a string,a C-style string, or an initializer_list&lt;char_type&gt;</span>
s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>c<span class="token punctuation">)</span> <span class="token comment">//Insert c before iterator p</span>
s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>n<span class="token punctuation">,</span>c<span class="token punctuation">)</span> <span class="token comment">//Insert n copies of c before iterator p</span>
<span class="token function">insert</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>b<span class="token punctuation">,</span>e<span class="token punctuation">)</span> <span class="token comment">//Insert [b:e) before iterator p</span>
s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span> <span class="token comment">//Remove trailing characters from s, starting with s[pos];s.size() becomes pos</span>
s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token comment">//Remove n characters from s, starting with s[pos];s.size() becomes max(pos,s.size()ïn)</span>

		<span class="token keyword">void</span> <span class="token function">add_middle</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> s<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> middle<span class="token punctuation">)</span> <span class="token comment">// add middle name</span>
		<span class="token punctuation">{</span>
		<span class="token keyword">auto</span> p <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token char">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token char">&#39; &#39;</span><span class="token operator">+</span>middle<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
		string dmr <span class="token operator">=</span> <span class="token string">&quot;Dennis Ritchie&quot;</span><span class="token punctuation">;</span>
		<span class="token function">add_middle</span><span class="token punctuation">(</span>dmr<span class="token punctuation">,</span><span class="token string">&quot;MacAlistair&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Dennis MacAlistair Ritchie</span>
		cout <span class="token operator">&lt;&lt;</span> dmr <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="替换函数" tabindex="-1"><a class="header-anchor" href="#替换函数" aria-hidden="true">#</a> 替换函数</h1><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span>n<span class="token punctuation">,</span>s2<span class="token punctuation">,</span>pos2<span class="token punctuation">,</span>n2<span class="token punctuation">)</span> <span class="token comment">//Replace s[pos:pos+n) with s2[pos2:pos2+n2)</span>
s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span>n<span class="token punctuation">,</span>p<span class="token punctuation">,</span>n2<span class="token punctuation">)</span> <span class="token comment">//Replace s[pos:pos+n) with [p:p+n2);s2 is a string or a C-style string</span>
s<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span>n<span class="token punctuation">,</span>s2<span class="token punctuation">)</span> <span class="token comment">//Replace s[pos:pos+n) with s2;s2 is a string or a C-style string</span>
s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span>n<span class="token punctuation">,</span>n2<span class="token punctuation">,</span>c<span class="token punctuation">)</span> <span class="token comment">//Replace s[pos:pos+n) with n2 copies of the character c</span>
s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>x<span class="token punctuation">)</span> <span class="token comment">//Replace [b:e) with x; x is a string, a C-style string,or an initializer_list&lt;char_type&gt;</span>
s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>p<span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token comment">//Replace [b:e) with [p:p+n)</span>
s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">,</span>c<span class="token punctuation">)</span> <span class="token comment">//Replace [b:e) with n copies of the character c</span>
s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>b2<span class="token punctuation">,</span>e2<span class="token punctuation">)</span> <span class="token comment">//Replace [b:e) with [b2:e2)</span>

		<span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
		string s <span class="token operator">=</span> <span class="token string">&quot;but I have heard it works even if you don&#39;t believe in it&quot;</span><span class="token punctuation">;</span>
		s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// erase initial &quot;but &quot;</span>
		s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot;even&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">&quot;only&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot; don&#39;t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// erase by replacing with &quot;&quot;</span>
		<span class="token function">assert</span><span class="token punctuation">(</span>s<span class="token operator">==</span><span class="token string">&quot;I have heard it works only if you believe in it&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="查找函数" tabindex="-1"><a class="header-anchor" href="#查找函数" aria-hidden="true">#</a> 查找函数</h1><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>pos<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">//Find x in s; pos is the index of the first character found or string::npos</span>
pos<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>pos2<span class="token punctuation">)</span> <span class="token comment">//pos=find(basic_string(s,pos2)</span>
pos<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>pos2<span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token comment">//pos=s.find(basic_string{p,n},pos2)</span>

pos<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">rfind</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>pos2<span class="token punctuation">)</span> <span class="token comment">//Find x in s[0:pos2); pos is the position of the first characterof the x closest to the end of s or string::npos</span>
pos<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">rfind</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">//pos=s.rfind(p,string::npos)</span>
pos<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">rfind</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>pos2<span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token comment">//pos=s.rfind(basic_string{p,n},pos2)</span>

		<span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
		string s <span class="token punctuation">{</span><span class="token string">&quot;accdcde&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
		<span class="token keyword">auto</span> i1 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot;cd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// i1==2 s[2]==&#39;c&#39; &amp;&amp; s[3]==&#39;d&#39;</span>
		<span class="token keyword">auto</span> i2 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">rfind</span><span class="token punctuation">(</span><span class="token string">&quot;cd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// i2==4 s[4]==&#39;c&#39; &amp;&amp; s[5]==&#39;d&#39;</span>
		<span class="token punctuation">}</span><span class="token operator">*</span><span class="token operator">*</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>🪁 <strong>x can be a character, a string, or a C-style string; p is a C-style string. All operations are noexcept.</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>pos2<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">find_first_of</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>pos<span class="token punctuation">)</span> <span class="token comment">//Find a character from x in s[pos:s.size());pos2 is the position of the first character from xin s[pos:s.size()) or string::npos</span>
pos<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">find_first_of</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">//pos=s.find_first_of(s2,0)</span>
pos2<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">find_first_of</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>pos<span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token comment">//pos2=s.find_first_of(pos,basic_string{p,n})</span>
pos2<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">find_last_of</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>pos<span class="token punctuation">)</span> <span class="token comment">//Find a character from x in s[0:pos);pos2 is the position of the character from xclosest to the end of s or string::npos</span>
pos<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">find_last_of</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">//pos=s.find_first_of(s2,0)</span>
pos2<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">find_last_of</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>pos<span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token comment">//pos2=s.find_last_of(pos2,basic_string{p,n})</span>
pos2<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">find_first_not_of</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>pos<span class="token punctuation">)</span> <span class="token comment">//Find a character not from x in s[pos:s.size());pos2 is the position of the first character from xnot in s[pos:s.size()) or string::npos</span>
pos<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">find_first_not_of</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">//pos=s.find_first_not_of(s2,0)</span>
pos2<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">find_first_not_of</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>pos<span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token comment">//pos2=s.find_first_not_of(pos,basic_string{p,n})</span>
pos2<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">find_last_not_of</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>pos<span class="token punctuation">)</span> <span class="token comment">//Find a character not from x in s[0:pos);pos is the position of the characterfrom x closest to the end of s or string::npos</span>
pos<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">find_last_not_of</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">//pos=s.find_first_not_of(s2,0)</span>
pos2<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">find_last_not_of</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>pos<span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token comment">//pos=s.find_last_not_of(pos,basic_string{p,n})</span>


		string s <span class="token punctuation">{</span><span class="token string">&quot;accdcde&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
		<span class="token keyword">auto</span> i1 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot;cd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// i1==2 s[2==&#39;c&#39; &amp;&amp; s[3]==&#39;d&#39;</span>
		<span class="token keyword">auto</span> i2 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">rfind</span><span class="token punctuation">(</span><span class="token string">&quot;cd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// i2==4 s[4]==&#39;c&#39; &amp;&amp; s[5]==&#39;d&#39;</span>
		<span class="token keyword">auto</span> i3 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">find_first_of</span><span class="token punctuation">(</span><span class="token string">&quot;cd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// i3==1 s[1]==&#39;c&#39;</span>
		<span class="token keyword">auto</span> i4 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">find_last_of</span><span class="token punctuation">(</span><span class="token string">&quot;cd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// i4==5 s[5]==&#39;d&#39;</span>
		<span class="token keyword">auto</span> i5 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">find_first_not_of</span><span class="token punctuation">(</span><span class="token string">&quot;cd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// i5==0 s[0]!=&#39;c&#39; &amp;&amp; s[0]!=&#39;d&#39;</span>
		<span class="token keyword">auto</span> i6 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">find_last_not_of</span><span class="token punctuation">(</span><span class="token string">&quot;cd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// i6==6 s[6]!=&#39;c&#39; &amp;&amp; s[6]!=&#39;d&#39;**</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="截取函数" tabindex="-1"><a class="header-anchor" href="#截取函数" aria-hidden="true">#</a> 截取函数</h1><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>s2<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token comment">//s2=basic_string(&amp;s[pos],m) where m=min(s.size()ïn,n)</span>
s2<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span> <span class="token comment">//s2=s.substr(pos,string::npos)</span>
s2<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//s2=s.substr(0,string::npos)</span>

		<span class="token keyword">void</span> <span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
		string s <span class="token operator">=</span> <span class="token string">&quot;Mary had a little lamb&quot;</span><span class="token punctuation">;</span>
		string s2 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// s2 == &quot;Mary&quot;</span>
		s2 <span class="token operator">=</span> <span class="token string">&quot;Rose&quot;</span><span class="token punctuation">;</span> <span class="token comment">// does not change s</span>
		<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="比较函数" tabindex="-1"><a class="header-anchor" href="#比较函数" aria-hidden="true">#</a> 比较函数</h1><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>n<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token comment">//A lexicographical comparison of s and s2;using char_traits&lt;C&gt;::compare() for comparison;n=0 if s==s2; n&lt;0 if s&lt;s2; n&gt;0 if s2&gt;s; noexcept;</span>
n2<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span>n<span class="token punctuation">,</span>s2<span class="token punctuation">)</span> <span class="token comment">//n2=basic_string{s,pos,n}.compare(s2)</span>
n2<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span>n<span class="token punctuation">,</span>s2<span class="token punctuation">,</span>pos2<span class="token punctuation">,</span>n2<span class="token punctuation">)</span> <span class="token comment">//n2=basic_string{s,pos,n}.compare(basic_string{s2,pos2,n2})</span>
n<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token comment">//n=compare(basic_string{p});p is a C-style string</span>
n2<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span>n<span class="token punctuation">,</span>p<span class="token punctuation">)</span> <span class="token comment">//n2=basic_string{s,pos,n}.compare(basic_string{p});p is a C-style string</span>
n2<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span>n<span class="token punctuation">,</span>p<span class="token punctuation">,</span>n2<span class="token punctuation">)</span> <span class="token comment">//n2=basic_string{s,pos,n}.compare(basic_string{p,n2});p is a C-style string</span>
		<span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
		string s <span class="token operator">=</span> <span class="token string">&quot;Mary had a little lamb&quot;</span><span class="token punctuation">;</span>
		string s2 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// s2 == &quot;Mary&quot;</span>
		<span class="token keyword">auto</span> i1 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// i1 is positive</span>
		<span class="token keyword">auto</span> i2 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// i2==0</span>
		<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27),e=[o];function c(i,l){return s(),a("div",null,e)}const r=n(p,[["render",c],["__file","string相关函数.html.vue"]]);export{r as default};
