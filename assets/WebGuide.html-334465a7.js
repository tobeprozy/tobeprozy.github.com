const e=JSON.parse('{"key":"v-4b524440","path":"/30web/WebGuide.html","title":"","lang":"zh-CN","frontmatter":{"description":"🍥 搭建 LearnData 首先，进入 LearnData 项目页，点击右上方的「Use this template」&gt;「Create a new repository」。 接着，进入项目仓库的「Settings」&gt;「Actions」&gt;「General」，选中底部 Workflow permissions 中的 Read and write permissions，然后点击保存即可。如果未授权，GitHub Page 部署会由于 repo 权限不足而报错 failed with exit code 128。 接下来，进入菜单栏顶部的「Actions」&gt;「最新的 workflow」，点击右上方的「Re-run jobs」&gt;「Re-run all jobs」，重新生成网页。若部署正确，GitHub 将自动搭建 gh-page branch 页面。(如果你不需要将文件同步到服务器，则请删除 .github/workflows/main.yml 中 Sync files 区块的代码，以避免出现报错。) 然后点击「Settings」, 修改 Repository name 为 用户名.github.io。假设你的仓库链接是 https://github.com/xxx/LearnData，那么中间的 xxx 就是你的用户名。如果该仓库名称已被使用，GitHub Pages 将无法正常显示样式，请查看页面底部的常见问题来设置子域名。 在同一页面选择「Settings」&gt;「Pages」&gt;「Build and deployment」&gt;「Branch」, 将 gh-page branch 设为 GitHub Pages 的来源，网站运行目录默认为 /(root)。设置完成后，点击「Save」。如果找不到 gh-pages 分支，可以按照上面提到的第三步进行操作，或在 GitHub 中修改任意文件以手动触发 GitHub Action，等待其执行完成后，再重新设置 Pages 的来源。 设置成功后，页面会提示访问链接：https://xxx.github.io/，知识库搭建完毕。 如果未出现访问链接提示或不能打开 GitHub Pages，则删除 docs/_posts 路径下的博客文件，GitHub Pages 有时会对旧文章里的代码报错。","head":[["meta",{"property":"og:url","content":"https://tobeprozy.github.io/30web/WebGuide.html"}],["meta",{"property":"og:site_name","content":"南叔先生-开源笔记"}],["meta",{"property":"og:description","content":"🍥 搭建 LearnData 首先，进入 LearnData 项目页，点击右上方的「Use this template」&gt;「Create a new repository」。 接着，进入项目仓库的「Settings」&gt;「Actions」&gt;「General」，选中底部 Workflow permissions 中的 Read and write permissions，然后点击保存即可。如果未授权，GitHub Page 部署会由于 repo 权限不足而报错 failed with exit code 128。 接下来，进入菜单栏顶部的「Actions」&gt;「最新的 workflow」，点击右上方的「Re-run jobs」&gt;「Re-run all jobs」，重新生成网页。若部署正确，GitHub 将自动搭建 gh-page branch 页面。(如果你不需要将文件同步到服务器，则请删除 .github/workflows/main.yml 中 Sync files 区块的代码，以避免出现报错。) 然后点击「Settings」, 修改 Repository name 为 用户名.github.io。假设你的仓库链接是 https://github.com/xxx/LearnData，那么中间的 xxx 就是你的用户名。如果该仓库名称已被使用，GitHub Pages 将无法正常显示样式，请查看页面底部的常见问题来设置子域名。 在同一页面选择「Settings」&gt;「Pages」&gt;「Build and deployment」&gt;「Branch」, 将 gh-page branch 设为 GitHub Pages 的来源，网站运行目录默认为 /(root)。设置完成后，点击「Save」。如果找不到 gh-pages 分支，可以按照上面提到的第三步进行操作，或在 GitHub 中修改任意文件以手动触发 GitHub Action，等待其执行完成后，再重新设置 Pages 的来源。 设置成功后，页面会提示访问链接：https://xxx.github.io/，知识库搭建完毕。 如果未出现访问链接提示或不能打开 GitHub Pages，则删除 docs/_posts 路径下的博客文件，GitHub Pages 有时会对旧文章里的代码报错。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-26T10:25:41.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-26T10:25:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-04-26T10:25:41.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"🍥 搭建 LearnData","slug":"🍥-搭建-learndata","link":"#🍥-搭建-learndata","children":[]},{"level":2,"title":"🔣 配置 LearnData","slug":"🔣-配置-learndata","link":"#🔣-配置-learndata","children":[{"level":3,"title":"文档结构","slug":"文档结构","link":"#文档结构","children":[]},{"level":3,"title":"看板娘","slug":"看板娘","link":"#看板娘","children":[]},{"level":3,"title":"读书笔记","slug":"读书笔记","link":"#读书笔记","children":[]},{"level":3,"title":"本地图片引用","slug":"本地图片引用","link":"#本地图片引用","children":[]}]},{"level":2,"title":"🖥️ 网站部署","slug":"🖥️-网站部署","link":"#🖥️-网站部署","children":[{"level":3,"title":"同步到服务器","slug":"同步到服务器","link":"#同步到服务器","children":[]},{"level":3,"title":"部署到 Vercel","slug":"部署到-vercel","link":"#部署到-vercel","children":[]}]},{"level":2,"title":"🤔 常见问题","slug":"🤔-常见问题","link":"#🤔-常见问题","children":[{"level":3,"title":"网页显示异常","slug":"网页显示异常","link":"#网页显示异常","children":[]},{"level":3,"title":"同步服务器报错","slug":"同步服务器报错","link":"#同步服务器报错","children":[]},{"level":3,"title":"ERR_MODULE","slug":"err-module","link":"#err-module","children":[]},{"level":3,"title":"静态文件名字总变","slug":"静态文件名字总变","link":"#静态文件名字总变","children":[]},{"level":3,"title":"本地运行 LearnData","slug":"本地运行-learndata","link":"#本地运行-learndata","children":[]}]}],"git":{"createdTime":1682504741000,"updatedTime":1682504741000,"contributors":[{"name":"tobeprozy","email":"904762096@qq.com","commits":1}]},"readingTime":{"minutes":9.32,"words":2795},"filePathRelative":"30web/WebGuide.md","localizedDate":"2023年4月26日","excerpt":"<h2> 🍥 搭建 LearnData</h2>\\n<ol>\\n<li>\\n<p>首先，进入 <a href=\\"https://github.com/rockbenben/LearnData\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">LearnData</a> 项目页，点击右上方的「Use this template」&gt;「Create a new repository」。</p>\\n<figure><img src=\\"https://tc.seoipo.com/2022-08-10-19-32-05.png?imageMogr2/format/webp\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n<figure><img src=\\"https://tc.seoipo.com/2022-08-10-19-34-13.png?imageMogr2/thumbnail/!60p\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n</li>\\n<li>\\n<p>接着，进入项目仓库的「Settings」&gt;「Actions」&gt;「General」，选中底部 Workflow permissions 中的 <code>Read and write permissions</code>，然后点击保存即可。如果未授权，GitHub Page 部署会由于 repo 权限不足而报错 <code>failed with exit code 128</code>。</p>\\n<figure><img src=\\"https://tc.seoipo.com/2023-03-14-04-02-16.png?imageMogr2/format/webp\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n</li>\\n<li>\\n<p>接下来，进入菜单栏顶部的「Actions」&gt;「最新的 workflow」，点击右上方的「Re-run jobs」&gt;「Re-run all jobs」，重新生成网页。若部署正确，GitHub 将自动搭建 gh-page branch 页面。(如果你不需要将<strong>文件同步到服务器</strong>，则请删除 <code>.github/workflows/main.yml</code> 中 Sync files 区块的代码，以避免出现报错。)</p>\\n<figure><img src=\\"https://tc.seoipo.com/2023-03-14-04-04-52.gif\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n</li>\\n<li>\\n<p>然后点击「Settings」, 修改 <code>Repository name</code> 为 <code>用户名.github.io</code>。假设你的仓库链接是 <code>https://github.com/xxx/LearnData</code>，那么中间的 <code>xxx</code> 就是你的用户名。如果该仓库名称已被使用，GitHub Pages 将无法正常显示样式，请查看页面底部的常见问题来设置子域名。</p>\\n<figure><img src=\\"https://tc.seoipo.com/20180505202201.png?imageMogr2/format/webp\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n</li>\\n<li>\\n<p>在同一页面选择「Settings」&gt;「Pages」&gt;「Build and deployment」&gt;「Branch」, 将 gh-page branch 设为 GitHub Pages 的来源，网站运行目录默认为 <code>/(root)</code>。设置完成后，点击「Save」。如果找不到 gh-pages 分支，可以按照上面提到的第三步进行操作，或在 GitHub 中修改任意文件以手动触发 GitHub Action，等待其执行完成后，再重新设置 Pages 的来源。</p>\\n<figure><img src=\\"https://tc.seoipo.com/2022-08-10-19-39-15.png?imageMogr2/format/webp\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n</li>\\n<li>\\n<p>设置成功后，页面会提示访问链接：<code>https://xxx.github.io/</code>，知识库搭建完毕。</p>\\n<p>如果未出现访问链接提示或不能打开 GitHub Pages，则删除 <code>docs/_posts</code> 路径下的博客文件，GitHub Pages 有时会对旧文章里的代码报错。</p>\\n</li>\\n</ol>","autoDesc":true}');export{e as data};
