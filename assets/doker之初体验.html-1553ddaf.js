import{_ as i,Y as t,Z as o,$ as n,a0 as s,a1 as a,a2 as c,D as l}from"./framework-39b9cf04.js";const r="/assets/1-a1e71312.png",d="/assets/architecture-1682607631002-15-65106a57.svg",p="/assets/2-3f38c0f7.png",u="/assets/3-a8dc50ff.png",m="/assets/4465825829758155604-1d28b976.png",v="/assets/722150363256505358-db4cc455.png",k="/assets/5001603941608011782-e9e8dea3.png",b="/assets/5573733724603017935-cfb9382b.png",h="/assets/8103715570088941301-519ac94f.png",g="/assets/3167122898973259626-b5323dd1.png",f="/assets/3505407808930852399-c0fe6365.png",_={},x=n("h1",{id:"使用教程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#使用教程","aria-hidden":"true"},"#"),s(" 使用教程")],-1),y={href:"https://www.coonote.com/docker/docker-image-usage.html",target:"_blank",rel:"noopener noreferrer"},D=n("figure",null,[n("img",{src:r,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),w={href:"https://hub.docker.com/search?q=",target:"_blank",rel:"noopener noreferrer"},z=n("h1",{id:"docker基本概念",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#docker基本概念","aria-hidden":"true"},"#"),s(" Docker基本概念")],-1),I=n("figure",null,[n("img",{src:d,alt:"architecture",tabindex:"0",loading:"lazy"}),n("figcaption",null,"architecture")],-1),N=n("figure",null,[n("img",{src:p,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),O=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"概念"),n("th",{style:{"text-align":"center"}},"说明")])],-1),q=n("tr",null,[n("td",{style:{"text-align":"center"}},[n("strong",null,"Docker 镜像(Images)")]),n("td",{style:{"text-align":"center"}},[s("Docker 镜像是用于创建 Docker 容器的模板，比如 Ubuntu 系统。"),n("strong",null,"可以当作C++的类，具备独立的功能")])],-1),C=n("tr",null,[n("td",{style:{"text-align":"center"}},[n("strong",null,"Docker 容器(Container)")]),n("td",{style:{"text-align":"center"}},[s("容器是独立运行的一个或一组应用，是镜像运行时的实体。"),n("strong",null,"可以当作C++的对象，由类生成的实体")])],-1),R=n("td",{style:{"text-align":"center"}},[n("strong",null,"Docker 客户端(Client)")],-1),E={style:{"text-align":"center"}},T={href:"https://docs.docker.com/develop/sdk/",target:"_blank",rel:"noopener noreferrer"},S={href:"https://www.coonote.com/cplusplus-note/linux-daemons.html",target:"_blank",rel:"noopener noreferrer"},H=n("strong",null,"它就是Docker的用户界面",-1),A=n("tr",null,[n("td",{style:{"text-align":"center"}},[n("strong",null,"Docker 主机(Host)")]),n("td",{style:{"text-align":"center"}},[s("一个物理或者虚拟的机器用于执行 Docker 守护进程和容器。 "),n("strong",null,"安装docker的机器，也就是我们正在使用的主机")])],-1),B=n("tr",null,[n("td",{style:{"text-align":"center"}},[n("strong",null,"Docker daemon（守护进程）")]),n("td",{style:{"text-align":"center"}},"Docker daemon是一个运行在宿主机（ DOCKER-HOST）的后台进程。可通过 Docker客户端与之通信。")],-1),G=n("td",{style:{"text-align":"center"}},"Docker Registry",-1),M={style:{"text-align":"center"}},U={href:"https://hub.docker.com",target:"_blank",rel:"noopener noreferrer"},V=c('<h1 id="安装docker" tabindex="-1"><a class="header-anchor" href="#安装docker" aria-hidden="true">#</a> 安装docker</h1><figure><img src="'+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 安装 Docker</span>
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> docker.io
<span class="token comment"># 启动 Docker 服务</span>
<span class="token function">sudo</span> systemctl start <span class="token function">docker</span>

<span class="token comment"># 开机自动启动 Docker</span>
<span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span>

<span class="token comment"># 创建 Docker 用户组</span>
<span class="token function">sudo</span> <span class="token function">groupadd</span> <span class="token function">docker</span>

<span class="token comment"># 将当前用户加入 Docker 用户组</span>
<span class="token function">sudo</span> <span class="token function">usermod</span> <span class="token parameter variable">-aG</span> <span class="token function">docker</span> <span class="token environment constant">$USER</span>

<span class="token comment"># 切换到 Docker 用户组</span>
newgrp <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="docker常用命令" tabindex="-1"><a class="header-anchor" href="#docker常用命令" aria-hidden="true">#</a> Docker常用命令</h1><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Docker环境信息   info、version
容器生命周期管理  create、exec、kill、pause、restart、rm、run、start、stop、unpause
镜像仓库命令      login、logout、pull、push、search
镜像管理          build、images、import、load、rmi、save、tag、commit
容器运维操作      attach、export、inspect、port、ps、rename、stats、top、wait、cp、diff、update
容器资源管理      volume、network
系统信息日志      events、history、logs
<span class="token number">1</span>.events打印容器的实时系统事件
<span class="token number">2</span>.history 打印出指定镜像的历史版本信息
<span class="token number">3</span>.logs打印容器中进程的运行日志
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="容器操作" tabindex="-1"><a class="header-anchor" href="#容器操作" aria-hidden="true">#</a> 容器操作</h2><h3 id="启动容器" tabindex="-1"><a class="header-anchor" href="#启动容器" aria-hidden="true">#</a> 启动容器</h3><p>启动容器有两种方式，一种是基于镜像新建一个容器并启动，另外一个是将在终止状态的容器重新启动。</p><blockquote><p>docker run --help Usage: docker run [OPTIONS] IMAGE [COMMAND] [ARG…]</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 运行一个容器，打印Hello world后退出</span>
<span class="token function">docker</span> run alpine /bin/echo <span class="token string">&#39;Hello world&#39;</span>
<span class="token comment"># 创建一个交互容器 退出当前命令，容器也随之退出</span>
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> alpine
<span class="token comment"># 创建一个后台运行容器</span>
<span class="token function">docker</span> run  <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> demo1 alpine  <span class="token function">sleep</span> 10m
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>run命令常用参数:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-t</span>  参数让Docker分配一个伪终端并绑定到容器的标准输入上
<span class="token parameter variable">-i</span>  参数则让容器的标准输入保持打开。
<span class="token parameter variable">-c</span> 参数用于给运行的容器分配cpu的shares值
<span class="token parameter variable">-m</span> 参数用于限制为容器的内存信息，以 B、K、M、G 为单位
<span class="token parameter variable">-v</span> 参数用于挂载一个volume，可以用多个-v参数同时挂载多个volume
<span class="token parameter variable">-p</span> 参数用于将容器的端口暴露给宿主机端口 格式：host_port:container_port 或者
host_ip:host_port:container_port
<span class="token parameter variable">--name</span> 容器名称
<span class="token parameter variable">--net</span> 容器使用的网络
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>docker可以使用 docker run --help 可以查看详细参数，docker中所有子命令都可以采用类似方式了解详情。</p><figure><img src="`+m+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="启动停止容器" tabindex="-1"><a class="header-anchor" href="#启动停止容器" aria-hidden="true">#</a> 启动停止容器</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> stop demo1
<span class="token function">docker</span> start demo1
<span class="token function">docker</span> restart demo1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+v+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="查看容器" tabindex="-1"><a class="header-anchor" href="#查看容器" aria-hidden="true">#</a> 查看容器</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看正在运行的容器</span>
<span class="token function">docker</span> <span class="token function">ps</span>
<span class="token comment"># 查看所有容 包括停止的容器</span>
<span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span>
<span class="token comment"># 查看容器详细信息</span>
<span class="token function">docker</span> inspect demo1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+k+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="容器进程" tabindex="-1"><a class="header-anchor" href="#容器进程" aria-hidden="true">#</a> 容器进程</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#top支持 ps 命令参数，格式：docker top [OPTIONS] CONTAINER [ps OPTIONS]</span>
<span class="token comment">#列出redis容器中运行进程</span>
<span class="token function">docker</span> <span class="token function">top</span> redis
<span class="token comment">#查看所有运行容器的进程信息</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span>  <span class="token variable"><span class="token variable">\`</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token operator">|</span><span class="token function">grep</span> Up<span class="token operator">|</span><span class="token function">awk</span> <span class="token string">&#39;{print $1}&#39;</span><span class="token variable">\`</span></span><span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token builtin class-name">echo</span> <span class="token punctuation">\\</span> <span class="token operator">&amp;&amp;</span><span class="token function">docker</span> <span class="token function">top</span> <span class="token variable">$i</span><span class="token punctuation">;</span> <span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+b+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="容器日志" tabindex="-1"><a class="header-anchor" href="#容器日志" aria-hidden="true">#</a> 容器日志</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#查看redis容器日志，默认参数</span>
<span class="token function">docker</span> logs redis
<span class="token comment">#查看redis容器日志，参数：-f  跟踪日志输出；-t   显示时间戳；--tail  仅列出最新N条容器日志；</span>
<span class="token function">docker</span> logs <span class="token parameter variable">-f</span> <span class="token parameter variable">-t</span> <span class="token parameter variable">--tail</span><span class="token operator">=</span><span class="token number">20</span> redis
<span class="token comment">#查看容器redis从2020年06月01日后的最新10条日志。</span>
<span class="token function">docker</span> logs <span class="token parameter variable">--since</span><span class="token operator">=</span><span class="token string">&quot;2020-06-01&quot;</span> <span class="token parameter variable">--tail</span><span class="token operator">=</span><span class="token number">10</span> redis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+h+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="进入容器" tabindex="-1"><a class="header-anchor" href="#进入容器" aria-hidden="true">#</a> 进入容器</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> demo1 /bin/sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="删除容器" tabindex="-1"><a class="header-anchor" href="#删除容器" aria-hidden="true">#</a> 删除容器</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#　删除一个已经停止运行的容器</span>
<span class="token function">docker</span> <span class="token function">rm</span> demo1
<span class="token comment"># 强制删除正在运行的容器</span>
<span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> dome1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="停止容器" tabindex="-1"><a class="header-anchor" href="#停止容器" aria-hidden="true">#</a> 停止容器</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#停止一个运行中的容器</span>
<span class="token function">docker</span> stop redis
<span class="token comment">#杀掉一个运行中的容器</span>
<span class="token function">docker</span> <span class="token function">kill</span> redis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="导入、导出容器" tabindex="-1"><a class="header-anchor" href="#导入、导出容器" aria-hidden="true">#</a> 导入、导出容器</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 将容器导出为镜像</span>
<span class="token function">docker</span> <span class="token builtin class-name">export</span> demo1 <span class="token operator">&gt;</span> demo1.tar
<span class="token comment"># 导入镜像</span>
<span class="token function">docker</span> <span class="token function">import</span> demo1.tar xxx/demo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+g+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="镜像操作" tabindex="-1"><a class="header-anchor" href="#镜像操作" aria-hidden="true">#</a> 镜像操作</h2><p>获取镜像: docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 拉取镜像</span>
<span class="token function">docker</span> pull ngix
<span class="token comment"># 删除镜像</span>
<span class="token function">docker</span> rmi ngix
<span class="token comment"># 在远程仓库搜索镜像</span>
<span class="token function">docker</span> search ngix
<span class="token comment"># 列出本地images</span>
<span class="token function">docker</span> images
<span class="token comment"># 基于当前redis容器创建一个新的镜像；参数：-a 提交的镜像作者；-c 使用Dockerfile指令来创建镜像；-m :提交时的说明文字；-p :在commit时，将容器暂停</span>
<span class="token function">docker</span> commit <span class="token parameter variable">-a</span><span class="token operator">=</span><span class="token string">&quot;DeepInThought&quot;</span> <span class="token parameter variable">-m</span><span class="token operator">=</span><span class="token string">&quot;my redis&quot;</span> <span class="token punctuation">[</span>redis容器ID<span class="token punctuation">]</span>  myredis:v1.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+f+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>',39);function $(K,P){const e=l("ExternalLinkIcon");return t(),o("div",null,[x,n("p",null,[n("a",y,[s("Docker 镜像使用-菜鸟笔记 (coonote.com)"),a(e)])]),D,n("p",null,[n("a",w,[s("Explore Docker's Container Image Repository | Docker Hub"),a(e)])]),z,I,N,n("table",null,[O,n("tbody",null,[q,C,n("tr",null,[R,n("td",E,[s("Docker 客户端通过命令行或者其他工具使用 Docker SDK ("),n("a",T,[s("https://docs.docker.com/develop/sdk/"),a(e)]),s(") 与 Docker 的"),n("a",S,[s("守护进程"),a(e)]),s("通信。"),H])]),A,B,n("tr",null,[G,n("td",M,[s("Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。 Docker Hub("),n("a",U,[s("https://hub.docker.com"),a(e)]),s(") 提供了庞大的镜像集合供使用。 一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。 通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 <仓库名>:<标签> 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 latest 作为默认标签。")])])])]),V])}const Y=i(_,[["render",$],["__file","doker之初体验.html.vue"]]);export{Y as default};
