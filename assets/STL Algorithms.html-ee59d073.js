const n=JSON.parse(`{"key":"v-080b3415","path":"/12C_plus_plus/Cplus%E5%87%BD%E6%95%B0/STL%20Algorithms.html","title":"STL Algorithms","lang":"zh-CN","frontmatter":{"title":"STL Algorithms","article":true,"date":"2023-04-14T00:00:00.000Z","category":["Cplus"],"tag":["算法","Cplus"],"order":null,"icon":"🧑","description":"提示 STL Algorithms STL Algorithms for_each() 🪁 The simplest algorithm is for_each(), which just applies an operation to each element of a sequence: f=for_each(b,e ,f) Do f(x) for each x in [b:e); return f ''' \\t\\t**void increment_all(vector&lt;int&gt;&amp; v) // increment each element of v \\t\\t{ \\t\\tfor_each(v.begin(),v.end(), [](int&amp; x) {++x;}); \\t\\t} '''","head":[["meta",{"property":"og:url","content":"https://tobeprozy.github.io/12C_plus_plus/Cplus%E5%87%BD%E6%95%B0/STL%20Algorithms.html"}],["meta",{"property":"og:site_name","content":"南叔先生-开源笔记"}],["meta",{"property":"og:title","content":"STL Algorithms"}],["meta",{"property":"og:description","content":"提示 STL Algorithms STL Algorithms for_each() 🪁 The simplest algorithm is for_each(), which just applies an operation to each element of a sequence: f=for_each(b,e ,f) Do f(x) for each x in [b:e); return f ''' \\t\\t**void increment_all(vector&lt;int&gt;&amp; v) // increment each element of v \\t\\t{ \\t\\tfor_each(v.begin(),v.end(), [](int&amp; x) {++x;}); \\t\\t} '''"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-26T10:25:41.000Z"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:tag","content":"Cplus"}],["meta",{"property":"article:published_time","content":"2023-04-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-26T10:25:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"STL Algorithms\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-04-14T00:00:00.000Z\\",\\"dateModified\\":\\"2023-04-26T10:25:41.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1682504741000,"updatedTime":1682504741000,"contributors":[{"name":"tobeprozy","email":"904762096@qq.com","commits":1}]},"readingTime":{"minutes":12.79,"words":3838},"filePathRelative":"12C_plus_plus/Cplus函数/STL Algorithms.md","localizedDate":"2023年4月14日","excerpt":"<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>STL Algorithms</p>\\n</div>\\n<h1> STL Algorithms</h1>\\n<h1> for_each()</h1>\\n<p>🪁 <strong>The simplest algorithm is for_each(), which just applies an operation to each element of a sequence:</strong></p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code>f<span class=\\"token operator\\">=</span><span class=\\"token function\\">for_each</span><span class=\\"token punctuation\\">(</span>b<span class=\\"token punctuation\\">,</span>e <span class=\\"token punctuation\\">,</span>f<span class=\\"token punctuation\\">)</span> Do <span class=\\"token function\\">f</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">for</span> each x in <span class=\\"token punctuation\\">[</span>b<span class=\\"token operator\\">:</span>e<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token keyword\\">return</span> f\\n<span class=\\"token char\\">''</span>'\\n\\t\\t<span class=\\"token operator\\">*</span><span class=\\"token operator\\">*</span><span class=\\"token keyword\\">void</span> <span class=\\"token function\\">increment_all</span><span class=\\"token punctuation\\">(</span>vector<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span><span class=\\"token operator\\">&amp;</span> v<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// increment each element of v</span>\\n\\t\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token function\\">for_each</span><span class=\\"token punctuation\\">(</span>v<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">begin</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>v<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">end</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&amp;</span> x<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token operator\\">++</span>x<span class=\\"token punctuation\\">;</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token char\\">''</span>'\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
