import{_ as n,Y as s,Z as a,a2 as t}from"./framework-d651fda7.js";const p={},o=t(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>STL Algorithms</p></div><h1 id="stl-algorithms" tabindex="-1"><a class="header-anchor" href="#stl-algorithms" aria-hidden="true">#</a> STL Algorithms</h1><h1 id="for-each" tabindex="-1"><a class="header-anchor" href="#for-each" aria-hidden="true">#</a> for_each()</h1><p>🪁 <strong>The simplest algorithm is for_each(), which just applies an operation to each element of a sequence:</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>f<span class="token operator">=</span><span class="token function">for_each</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>f<span class="token punctuation">)</span> Do <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> each x in <span class="token punctuation">[</span>b<span class="token operator">:</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> f
<span class="token char">&#39;&#39;</span>&#39;
		<span class="token operator">*</span><span class="token operator">*</span><span class="token keyword">void</span> <span class="token function">increment_all</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> v<span class="token punctuation">)</span> <span class="token comment">// increment each element of v</span>
		<span class="token punctuation">{</span>
		<span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">++</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
<span class="token char">&#39;&#39;</span>&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="count" tabindex="-1"><a class="header-anchor" href="#count" aria-hidden="true">#</a> count()</h1><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>x<span class="token operator">=</span><span class="token function">count</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>v<span class="token punctuation">)</span> <span class="token comment">//x is the number of elements ∗p in [b:e) such that v==∗p</span>
x<span class="token operator">=</span><span class="token function">count_if</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>v<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//x is the number of elements ∗p in [b:e) such that f(∗p)</span>
		<span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> s<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token keyword">auto</span> n_space <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token char">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">auto</span> n_whitespace <span class="token operator">=</span> <span class="token function">count_if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>isspace<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">// ...</span>
			<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="find" tabindex="-1"><a class="header-anchor" href="#find" aria-hidden="true">#</a> find()</h1><p>🪁 <strong>The find() family of algorithms do linear searches for some element or predicate match:</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>p<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>v<span class="token punctuation">)</span> <span class="token comment">//p points to the first element in [b:e) such that ∗p==v</span>
p<span class="token operator">=</span><span class="token function">find_if</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//p points to the first element in [b:e) such that f(∗p)</span>
p<span class="token operator">=</span><span class="token function">find_if_not</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//p points to the first element in [b:e) such that !f(∗p)</span>
p<span class="token operator">=</span><span class="token function">find_first_of</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>b2<span class="token punctuation">,</span>e2<span class="token punctuation">)</span> <span class="token comment">//p points to the first element in [b:e) such that ∗p==∗qfor some q in [b2:e2)</span>
p<span class="token operator">=</span><span class="token function">find_first_of</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>b2<span class="token punctuation">,</span>e2<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//p points to the first element in [b:e) such that f(∗p,∗q)for some q in [b2:e2)</span>
p<span class="token operator">=</span><span class="token function">adjacent_find</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">)</span> <span class="token comment">//p points to the first element in [b:e) such that ∗p==∗(p+1)</span>
p<span class="token operator">=</span><span class="token function">adjacent_find</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//p points to the first element in [b:e) such that f(∗p,∗(p+1))</span>
p<span class="token operator">=</span><span class="token function">find_end</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>b2<span class="token punctuation">,</span>e2<span class="token punctuation">)</span> <span class="token comment">//p points to the last ∗p in [b:e) such that ∗p==∗q foran element ∗q in [b2:e2)</span>
p<span class="token operator">=</span><span class="token function">find_end</span><span class="token punctuation">(</span> b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>b2<span class="token punctuation">,</span>e2<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//p points to the last ∗p in [b:e) such that f(∗p,∗q) foran element ∗q in [b2:e2)</span>
		<span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> s<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
		<span class="token keyword">auto</span> p_space <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token char">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">auto</span> p_whitespace <span class="token operator">=</span> <span class="token function">find_if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> isspace<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// ...</span>
		<span class="token punctuation">}</span>


		array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> x <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
		array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> y <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
		<span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
		<span class="token keyword">auto</span> p <span class="token operator">=</span> <span class="token function">find_first_of</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token punctuation">.</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// p = &amp;x[1]</span>
		<span class="token keyword">auto</span> q <span class="token operator">=</span> <span class="token function">find_first_of</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// q = &amp;x[2]</span>
		<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="equal-and-mismatch" tabindex="-1"><a class="header-anchor" href="#equal-and-mismatch" aria-hidden="true">#</a> equal() and mismatch()</h1><p>🪁 <strong>The equal() and mismatch() algorithms compare pairs of sequences:</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">equal</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>b2<span class="token punctuation">)</span> <span class="token comment">//Is v==v2 for all corresponding elements of[b:e) and [b2:b2+(eïb))?</span>
<span class="token function">equal</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>b2<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//Is f(v,v2) for all corresponding elements of[b:e) and [b2:b2+(eïb))?</span>
<span class="token function">pair</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">mismatch</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>b2<span class="token punctuation">)</span> <span class="token comment">//p1 points to the first element in [b:e) andp2 points to the first element in [b2:b2+(eïb))such that !(∗p1==∗p2) or p1==e</span>
<span class="token function">pair</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">mismatch</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>b2<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//p1 points to the first element in [b:e) andp2points to the first element in [b2:b2+(eïb))such that !f(∗p1,∗p2) or p1==e</span>
		<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">In</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">In2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Pred</span> <span class="token operator">=</span> equal_to<span class="token operator">&lt;</span>Value_type<span class="token operator">&lt;</span>In<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>
		pair<span class="token operator">&lt;</span>In<span class="token punctuation">,</span> In2<span class="token operator">&gt;</span> <span class="token function">mismatch</span><span class="token punctuation">(</span>In first<span class="token punctuation">,</span> In last<span class="token punctuation">,</span> In2 first2<span class="token punctuation">,</span> Pred p <span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>first <span class="token operator">!=</span> last <span class="token operator">&amp;&amp;</span> <span class="token function">p</span><span class="token punctuation">(</span>∗first<span class="token punctuation">,</span>∗first2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token operator">++</span>first<span class="token punctuation">;</span>
		<span class="token operator">++</span>first2<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token punctuation">{</span>first<span class="token punctuation">,</span>first2<span class="token punctuation">}</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="search" tabindex="-1"><a class="header-anchor" href="#search" aria-hidden="true">#</a> search()</h1><p>🪁 <strong>The search() and search_n() algorithms find one sequence as a subsequence in another:</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>p<span class="token operator">=</span><span class="token function">search</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>b2<span class="token punctuation">,</span>e2<span class="token punctuation">)</span> <span class="token comment">//p points to the first ∗p in [b:e) such that[p:p+(eïb)) equals [b2:e2)</span>
p<span class="token operator">=</span><span class="token function">search</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>e <span class="token punctuation">,</span>b2<span class="token punctuation">,</span>e2<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//p points to the first ∗p in [b:e) such that[p:p+(eïb)) equals [b2:e2), using f for element comparison</span>
p<span class="token operator">=</span><span class="token function">search_n</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>n<span class="token punctuation">,</span>v<span class="token punctuation">)</span> <span class="token comment">//p points to the first element of [b:e) such thateach element of [p:p+n) has the value v</span>
p<span class="token operator">=</span><span class="token function">search_n</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>n<span class="token punctuation">,</span>v<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//p points to the first element of [b:e) such thatfor each element ∗q in [p:p+n) we hav e f(∗p,v)</span>

		string quote <span class="token punctuation">{</span><span class="token string">&quot;Why waste time learning, when ignorance is instantaneous?&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
		<span class="token keyword">bool</span> <span class="token function">in_quote</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> s<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
		<span class="token keyword">auto</span> p <span class="token operator">=</span> <span class="token function">search</span><span class="token punctuation">(</span>quote <span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>quote<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// find s in quote</span>
		<span class="token keyword">return</span> p<span class="token operator">!=</span>quote<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">void</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
		<span class="token keyword">bool</span> b1 <span class="token operator">=</span> <span class="token function">in_quote</span><span class="token punctuation">(</span><span class="token string">&quot;learning&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// b1 = true</span>
		<span class="token keyword">bool</span> b2 <span class="token operator">=</span> <span class="token function">in_quote</span><span class="token punctuation">(</span><span class="token string">&quot;lemming&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// b2 = false</span>
		<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="transform" tabindex="-1"><a class="header-anchor" href="#transform" aria-hidden="true">#</a> transform</h1><p>🪁 <strong>The modifying algorithms (also called mutating sequence algorithms) can (and often do) modify elements of their argument sequences.</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>p<span class="token operator">=</span><span class="token function">transform</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>out<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//Apply ∗q=f(∗p1) to every ∗p1 in [b:e), writing tothe corresponding ∗q in [out:out+(eïb)); p=out+(eïb)</span>
p<span class="token operator">=</span><span class="token function">transform</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>b2<span class="token punctuation">,</span>out<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//Apply ∗q=f(∗p1,∗p2) to every element in ∗p1 in [b:e) andthe corresponding ∗p2 in [b2:b2+(eïb)), writing tothe corresponding ∗q in [out:out+(eïb)); p=out+(eïb)</span>
	
		<span class="token keyword">void</span> <span class="token function">toupper</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token comment">// remove case</span>
		<span class="token punctuation">{</span>
		<span class="token function">transform</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>toupper<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="copy" tabindex="-1"><a class="header-anchor" href="#copy" aria-hidden="true">#</a> copy()</h1><p>🪁 <strong>The copy() family of algorithms copy elements from one sequence into another. The following sections list versions of copy() combined with other algorithms, such as replace_copy()</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>p<span class="token operator">=</span><span class="token function">copy</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>out<span class="token punctuation">)</span> <span class="token comment">//Copy all elements in [b:e) to [out:p); p=out+(eïb)</span>
p<span class="token operator">=</span><span class="token function">copy_if</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>out<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//Copy elements x in [b:e) for which f(x) to [out:p)</span>
p<span class="token operator">=</span><span class="token function">copy_n</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>n<span class="token punctuation">,</span>out<span class="token punctuation">)</span> <span class="token comment">//Copy the first n elements in [b:b+n) to [out:p); p=out+n</span>
p<span class="token operator">=</span><span class="token function">copy_backward</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>out<span class="token punctuation">)</span> <span class="token comment">//Copy all elements in [b:e) to [out:p),starting with its last element; p=out+(eïb)</span>
p<span class="token operator">=</span><span class="token function">move</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>out<span class="token punctuation">)</span> <span class="token comment">//Move all elements in [b:e) to [out:p); p=out+(eïb)</span>
p<span class="token operator">=</span><span class="token function">move_backward</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>out<span class="token punctuation">)</span> <span class="token comment">//Move all elements in [b:e) to [out:p),starting with its last element; p=out+(eïb)</span>

		<span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> vs<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> v<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
		<span class="token function">copy</span><span class="token punctuation">(</span>vs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>vs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// might overwr ite end of v</span>
		<span class="token function">copy</span><span class="token punctuation">(</span>vs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>vs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>back_inser <span class="token function">ter</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// add elements from vs to end of v</span>
		<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="unique" tabindex="-1"><a class="header-anchor" href="#unique" aria-hidden="true">#</a> unique()</h1><p>🪁 <strong>The unique() algorithm removes adjacent duplicate elements from a sequence:</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>p<span class="token operator">=</span><span class="token function">unique</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">)</span> <span class="token comment">//Move elements in [b:e) such that [b:p) has no adjacent duplicates</span>
p<span class="token operator">=</span><span class="token function">unique</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//Move elements in [b:e) such that [b:p) has no adjacent duplicates;f(∗p,∗(p+1)) defines ‘‘duplicate’’</span>
p<span class="token operator">=</span><span class="token function">unique_copy</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>out<span class="token punctuation">)</span> <span class="token comment">//Copy [b:e) to [out:p); don’t copy adjacent duplicates</span>
p<span class="token operator">=</span><span class="token function">unique_copy</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>out<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//Copy [b:e) to [out:p); don’t copy adjacent duplicates;f(∗p,∗(p+1)) defines ‘‘duplicate’’</span>
		<span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span>list<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token operator">&amp;</span> ls<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token operator">&amp;</span> vs<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
		ls<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// list sort (§31.4.2)</span>
		<span class="token function">unique_copy</span><span class="token punctuation">(</span>ls<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ls<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>back_inser <span class="token function">ter</span><span class="token punctuation">(</span>vs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">void</span> <span class="token function">bad</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token operator">&amp;</span> vs<span class="token punctuation">)</span> <span class="token comment">// warning: doesn’t do what it appears to do!</span>
		<span class="token punctuation">{</span>
		<span class="token function">sort</span><span class="token punctuation">(</span>vs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>vs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// sor t vector</span>
		<span class="token function">unique</span><span class="token punctuation">(</span>vs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>vs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// eliminate duplicates (no it doesn’t!)</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
		string s <span class="token operator">=</span><span class="token string">&quot;abbcccde&quot;</span><span class="token punctuation">;</span>
		<span class="token keyword">auto</span> p <span class="token operator">=</span> <span class="token function">unique</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> <span class="token char">&#39; &#39;</span> <span class="token operator">&lt;&lt;</span> pïs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span><span class="token comment">//abcdecde 5</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token operator">&gt;</span>
		<span class="token keyword">void</span> <span class="token function">eliminate_duplicates</span><span class="token punctuation">(</span>C<span class="token operator">&amp;</span> c<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
		<span class="token function">sort</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// sor t</span>
		<span class="token keyword">auto</span> p <span class="token operator">=</span> <span class="token function">unique</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// compact</span>
		c<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// shrink</span>
		<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="remove-and-replace" tabindex="-1"><a class="header-anchor" href="#remove-and-replace" aria-hidden="true">#</a> remove() and replace()</h1><p>🪁 <strong>The remove() algorithm ‘‘removes’’ elements to the end of a sequence:</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>p<span class="token operator">=</span><span class="token function">remove</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>v<span class="token punctuation">)</span> <span class="token comment">//Remove elements with value v from [b:e),such that [b:p) becomes the elements for which !(∗q==v)</span>
p<span class="token operator">=</span><span class="token function">remove_if</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>v<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//Remove elements ∗q from [b:e),such that [b:p) becomes the elements for which !f(∗q)</span>
p<span class="token operator">=</span><span class="token function">remove_copy</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>out<span class="token punctuation">,</span>v<span class="token punctuation">)</span> <span class="token comment">//Copy elements from [b:e) for which !(∗q==v) to [out:p)</span>
p<span class="token operator">=</span><span class="token function">remove_copy_if</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>out<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//Copy elements from [b:e) for which !f(∗q) to [out:p)reverse(b,e) Reverse the order of elements in [b:e)</span>
p<span class="token operator">=</span><span class="token function">reverse_copy</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>out<span class="token punctuation">)</span> <span class="token comment">//Copy [b:e) into [out:p) in rev erse order</span>

<span class="token function">replace</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>v<span class="token punctuation">,</span>v2<span class="token punctuation">)</span> <span class="token comment">//Replace elements ∗p in [b:e) for which ∗p==v with v2</span>
<span class="token function">replace_if</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">,</span>v2<span class="token punctuation">)</span> <span class="token comment">//Replace elements ∗p in [b:e) for which f(∗p) with v2</span>
p<span class="token operator">=</span><span class="token function">replace_copy</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>out<span class="token punctuation">,</span>v<span class="token punctuation">,</span>v2<span class="token punctuation">)</span> <span class="token comment">//Copy [b:e) to [out:p),replacing elements for which ∗p==v with v2</span>
p<span class="token operator">=</span><span class="token function">replace_copy_if</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>out<span class="token punctuation">,</span>f<span class="token punctuation">,</span>v2<span class="token punctuation">)</span> <span class="token comment">//Copy [b:e) to [out:p),replacing elements for which f(∗p,v) with v2</span>
		string s <span class="token punctuation">{</span><span class="token string">&quot;∗CamelCase∗IsUgly∗&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
		cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span> <span class="token comment">// *CamelCase*IsUgly*</span>
		<span class="token keyword">auto</span> p <span class="token operator">=</span> <span class="token function">remove</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token char">&#39;∗&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">copy</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p<span class="token punctuation">,</span>ostream_iterator<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>cout<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// CamelCaseIsUgly</span>
		cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span> <span class="token comment">// CamelCaseIsUglyly*</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="rotate-random-shuffle-and-partition" tabindex="-1"><a class="header-anchor" href="#rotate-random-shuffle-and-partition" aria-hidden="true">#</a> <strong>rotate(), random_shuffle(), and partition()</strong></h1><p>🪁 <strong>The rotate(), random_shuffle(), and partition() algorithms provide systematic ways of moving elements around in a sequence:</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>p<span class="token operator">=</span><span class="token function">rotate</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>m<span class="token punctuation">,</span>e<span class="token punctuation">)</span> <span class="token comment">//Left-rotate elements: treat [b:e) as a circlewith the first element right after the last;move ∗(b+i) to ∗((b+(i+(eïm))%(eïb));note: ∗b moves to ∗m; p=b+(eïm)</span>
p<span class="token operator">=</span><span class="token function">rotate_copy</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>m<span class="token punctuation">,</span>e <span class="token punctuation">,</span>out<span class="token punctuation">)</span> <span class="token comment">//Copy [b:e) into a rotated sequence [out:p)</span>

<span class="token function">random_shuffle</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">)</span> <span class="token comment">//Shuffle elements of [b:e), usingthe default random number generator</span>
<span class="token function">random_shuffle</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//Shuffle elements of [b:e), usingthe random number generator f</span>
<span class="token function">shuffle</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//Shuffle elements of [b:e), usingthe uniform random number generator f</span>

		<span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span>deque<span class="token operator">&lt;</span>Card<span class="token operator">&gt;</span><span class="token operator">&amp;</span> dc<span class="token punctuation">,</span> My_rand<span class="token operator">&amp;</span> r<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
		<span class="token function">random_shuffle</span><span class="token punctuation">(</span>dc<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dc<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// ...</span>
		<span class="token punctuation">}</span>

p<span class="token operator">=</span><span class="token function">partition</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//Place elements for which f(∗p1) in [b:p)and other elements in [p:e)</span>
p<span class="token operator">=</span>stable_par <span class="token function">tition</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//Place elements for which f(∗p1) in [b:p)and other elements in [p:e);preserve relative order</span>
<span class="token function">pair</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">partition_copy</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>out1<span class="token punctuation">,</span>out2<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//Copy elements of [b:e) for which f(∗p)into [out1:p1) and elements of [b:e)for which !f(∗p) into [out2:p2)</span>
p<span class="token operator">=</span><span class="token function">partition_point</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//For [b:e) p is the pointsuch that all_of(b,p,f) and none_of(p,e,f)</span>
<span class="token function">is_partitioned</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//Does every element of [b:e) for which f(∗p)precede every element for which !f(∗p)?</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="permutations" tabindex="-1"><a class="header-anchor" href="#permutations" aria-hidden="true">#</a> Permutations</h1><p>🪁 <strong>x is true if the next_∗ operation succeeded, otherwise false,Permutations are used to generate combinations of elements of a sequence. For example, the permutations of abc are acb, bac, bca, cab, and cba.</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>x<span class="token operator">=</span><span class="token function">next_permutation</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">)</span> <span class="token comment">//Make [b:e) the next permutation in lexicographical order</span>
x<span class="token operator">=</span><span class="token function">next_permutation</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//Make [b:e) the next permutation, using f for comparison</span>
x<span class="token operator">=</span><span class="token function">prev_permutation</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">)</span> <span class="token comment">//Make [b:e) the previous permutation in lexicographical order</span>
x<span class="token operator">=</span><span class="token function">prev_permutation</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//Make [b:e) the previous permutation, using f for comparison</span>
<span class="token function">is_permutation</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>b2<span class="token punctuation">)</span> <span class="token comment">//Is there a permutation of [b2:b2+(eïb)) that compares equalto [b,e)?</span>
<span class="token function">is_permutation</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>b2<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//Is there a permutation of [b2:b2+(eïb)) that compares equalto [b,e), using f(∗p,∗q) as the element comparison?</span>
		vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;</span> v <span class="token punctuation">{</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;c&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
		<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">next_permutation</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Similarly, the return value for prev_permutation() is false if [b:e) already contains the first permutation (abc in the example); in that case, it returns the last permutation (cba in the example).</strong></p><h1 id="fill" tabindex="-1"><a class="header-anchor" href="#fill" aria-hidden="true">#</a> fill()</h1><p>🪁 <strong>The fill() family of algorithms provide ways of assigning to and initializing elements of a sequence</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">fill</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>v<span class="token punctuation">)</span> <span class="token comment">//Assign v to each element of [b:e)</span>
p<span class="token operator">=</span><span class="token function">fill_n</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>n<span class="token punctuation">,</span>v<span class="token punctuation">)</span> <span class="token comment">//Assign v to each element of [b:b+n); p=b+n</span>
<span class="token function">generate</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//Assign f() to each element of [b:e)</span>
p<span class="token operator">=</span><span class="token function">generate_n</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>n<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//Assign f() to each element of [b:b+n); p=b+n</span>

<span class="token function">uninitialized_fill</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>v<span class="token punctuation">)</span> <span class="token comment">//Initialize each element in [b:e) with v</span>
p<span class="token operator">=</span><span class="token function">uninitialized_fill_n</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>n<span class="token punctuation">,</span>v<span class="token punctuation">)</span> <span class="token comment">//Initialize each element in [b:b+n) with v; p=b+n</span>
p<span class="token operator">=</span><span class="token function">uninitialized_copy</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>out<span class="token punctuation">)</span> <span class="token comment">//Initialize each element of [out:out+(eïb)); p=b+nwith its corresponding element from [b:e)</span>
p<span class="token operator">=</span><span class="token function">uninitialized_copy_n</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>n<span class="token punctuation">,</span>out<span class="token punctuation">)</span> <span class="token comment">//Initialize each element of [out:out+n)with its corresponding element from [b:b+n); p=b+n</span>
		<span class="token keyword">int</span> v1<span class="token punctuation">[</span><span class="token number">900</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token number">900</span><span class="token operator">&gt;</span> v2<span class="token punctuation">;</span>
		vector v3<span class="token punctuation">;</span>
		<span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
		<span class="token function">fill</span><span class="token punctuation">(</span><span class="token function">begin</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">end</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// set all elements of v1 to 99</span>
		<span class="token function">generate</span><span class="token punctuation">(</span><span class="token function">begin</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">end</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">,</span>Randint<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// set to random values (§40.7)</span>
		<span class="token comment">// output 200 random integers in the interval [0:100):</span>
		<span class="token function">generate_n</span><span class="token punctuation">(</span>ostream_iterator<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>cout<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span>Urand<span class="token punctuation">{</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// see §40.7</span>
		<span class="token function">fill_n</span><span class="token punctuation">(</span>back_inser ter<span class="token punctuation">{</span>v3<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// add 20 elements with the value 99 to v3</span>
		<span class="token punctuation">}</span>

		vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> vs <span class="token punctuation">{</span><span class="token string">&quot;Breugel&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;El Greco&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Delacroix&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Constable&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
		vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> vs2 <span class="token punctuation">{</span><span class="token string">&quot;Hals&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Goya&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Renoir&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Turner&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
		<span class="token function">copy</span><span class="token punctuation">(</span>vs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>vs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>vs2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>
		<span class="token function">uninitialized_copy</span><span class="token punctuation">(</span>vs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>vs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>vs2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// leaks!</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="swap" tabindex="-1"><a class="header-anchor" href="#swap" aria-hidden="true">#</a> swap()</h1><p>🪁 <strong>A swap() algorithm exchanges the values of two objects:</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token comment">//Exchange the values of x and y</span>
p<span class="token operator">=</span>swap_rang <span class="token function">es</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>b2<span class="token punctuation">)</span> <span class="token comment">//swap(v,v2) corresponding elements in [b:e) and [b2,b2+(eïb))</span>
<span class="token function">iter_swap</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span> <span class="token comment">//swap(∗p,∗q)</span>

		<span class="token keyword">void</span> <span class="token function">use</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span>∗ p<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
		swap_rang <span class="token function">es</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// exchange values</span>
		<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="sorting-and-searching" tabindex="-1"><a class="header-anchor" href="#sorting-and-searching" aria-hidden="true">#</a> Sorting and Searching</h1><p>🪁 <strong>Sorting and searching in sorted sequences are fundamental, and the needs of programmers are quite varied. Comparison is by default done using the &lt; operator, and equivalence of values a and b is determined by !(a&lt;b)&amp;&amp;!(b&lt;a) rather than requiring operator ==.</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">sort</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">)</span> <span class="token comment">//Sort [b:e)</span>
<span class="token function">sort</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//Sort [b:e), using f(∗p,∗q) as the sorting criterion</span>

stable_sor <span class="token function">t</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">)</span> <span class="token comment">//Sort [b:e) maintaining order of equal elements</span>
stable_sor <span class="token function">t</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//Sort [b:e), using f(∗p,∗q) as the sorting criterion,maintaining order of equal elements</span>
<span class="token function">partial_sort</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>m<span class="token punctuation">,</span>e<span class="token punctuation">)</span> <span class="token comment">//Sort enough of [b:e) to get [b:m) into order;[m:e) need not be sorted</span>
<span class="token function">partial_sort</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//Sort enough of [b:e) to get [b:m) into order, usingf(∗p,∗q) as the sorting criterion; [m:e) need not be sorted</span>
p<span class="token operator">=</span><span class="token function">partial_sort_copy</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>b2<span class="token punctuation">,</span>e2<span class="token punctuation">)</span> <span class="token comment">//Sort enough of [b:e) to copy the first e2ïb2 elementsinto [b2:e2);p is the smaller of b2 and b2+(eïb)</span>
p<span class="token operator">=</span><span class="token function">partial_sort_copy</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>b2<span class="token punctuation">,</span>e2<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//Sort enough of [b:e) to copy the first e2ïb2 elementsinto [b2:e2), using f for comparison;p is the smaller of b2 and b2+(eïb)</span>
<span class="token function">is_sorted</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">)</span> <span class="token comment">//Is [b:e) sorted?</span>
<span class="token function">is_sorted</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//Is [b:e) sorted, using f for comparison?</span>
p<span class="token operator">=</span><span class="token function">is_sorted_until</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">)</span> <span class="token comment">//p points to the first element in [b:e) that is not in order</span>
p<span class="token operator">=</span><span class="token function">is_sorted_until</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//p points to the first element in [b:e) that is not in order,using f for comparison</span>
<span class="token function">nth_element</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>n<span class="token punctuation">,</span>e<span class="token punctuation">)</span> <span class="token comment">//∗n is in the position it would be in if [b:e) was sorted;elements in [b:n) are &lt;= ∗n and ∗n &lt;= elements in [n:e)</span>
<span class="token function">nth_element</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>n<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//∗n is in the position it would be in if [b:e) was sorted;elements in [b:n) are &lt;= ∗n and ∗n &lt;= elements in [n:e),using f for comparison</span>

		<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">List</span><span class="token operator">&gt;</span>
		<span class="token keyword">void</span> <span class="token function">sort_list</span><span class="token punctuation">(</span>List<span class="token operator">&amp;</span> lst<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
		vector v <span class="token punctuation">{</span>lst<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>lst<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// initialize from lst</span>
		<span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// use container sort (§32.2)</span>
		<span class="token function">copy</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>lst<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Book<span class="token operator">&gt;</span><span class="token operator">&amp;</span> sales<span class="token punctuation">)</span> <span class="token comment">// find the top ten books</span>
		<span class="token punctuation">{</span>
		vector<span class="token operator">&lt;</span>Book<span class="token operator">&gt;</span> <span class="token function">bestsellers</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">partial_sort_copy</span><span class="token punctuation">(</span>sales<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sales<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		bestsellers<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>bestsellers<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> Book<span class="token operator">&amp;</span> b1<span class="token punctuation">,</span> <span class="token keyword">const</span> Book<span class="token operator">&amp;</span> b2<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> b1<span class="token punctuation">.</span><span class="token function">copies_sold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>b2<span class="token punctuation">.</span><span class="token function">copies_sold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">copy</span><span class="token punctuation">(</span>bestsellers<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>bestsellers<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ostream_iterator<span class="token operator">&lt;</span>Book<span class="token operator">&gt;</span><span class="token punctuation">{</span>cout<span class="token punctuation">,</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> v<span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">1000</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
		v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">randint</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// §40.7</span>
		<span class="token keyword">constexpr</span> <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
		<span class="token function">nth_element</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>n<span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;nth: &quot;</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
		cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">;</span>
		This produces<span class="token operator">:</span>
		<span class="token comment">//nth: 24</span>
		<span class="token comment">//10 8 15 19 21 15 8 7 6 17 21 2 18 8 1 9 3 21 20 18 10 7 3 3 8 11 11 22 22 23</span>

		vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> vs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;Helsinki&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Copenhagen&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Oslo&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Stockholm&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
		vector<span class="token operator">&lt;</span><span class="token keyword">char</span>∗<span class="token operator">&gt;</span> vcs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;Helsinki&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Copenhagen&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Oslo&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Stockholm&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
		<span class="token keyword">void</span> <span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
		<span class="token function">sort</span><span class="token punctuation">(</span>vs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// I have defined a range version of sort()</span>
		<span class="token function">sort</span><span class="token punctuation">(</span>vcs<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> x <span class="token operator">:</span> vs<span class="token punctuation">)</span>
		cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token char">&#39; &#39;</span>
		cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> x <span class="token operator">:</span> vcs<span class="token punctuation">)</span>
		cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">;</span>
		
		<span class="token comment">//This prints:</span>
		<span class="token comment">//Copenhagen Helsinki Stockholm Oslo</span>
		<span class="token comment">//Helsinki Copenhagen Oslo Stockholm	</span>
		<span class="token function">sort</span><span class="token punctuation">(</span>vcs<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span>∗ p<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span>∗ q<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="binary-search" tabindex="-1"><a class="header-anchor" href="#binary-search" aria-hidden="true">#</a> Binary Search</h1><p>🪁 <strong>The binary_search() family of algorithms provide binary searches of ordered (sorted) sequences:</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>p<span class="token operator">=</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>v<span class="token punctuation">)</span> <span class="token comment">//p points to the first occurrence of v in [b:e)</span>
p<span class="token operator">=</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>v<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//p points to the first occurrence of v in [b:e),using f for comparison</span>
p<span class="token operator">=</span><span class="token function">upper_bound</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>v<span class="token punctuation">)</span> p <span class="token comment">//points to the first value larger than v in [b:e)</span>
p<span class="token operator">=</span><span class="token function">upper_bound</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>v<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//p points to the first value larger than v in [b:e),using f for comparison</span>
<span class="token function">binary_search</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>v<span class="token punctuation">)</span> <span class="token comment">//Is v in the sorted sequence [b:e)?</span>
<span class="token function">binary_search</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>v<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//Is v in the sorted sequence [b:e), using f for comparison?</span>
<span class="token function">pair</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">equal_range</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>v<span class="token punctuation">)</span> <span class="token comment">//[p1,p2) is the subsequence of [b:e) with the value v;basically, a binary search for v</span>
<span class="token function">pair</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">equal_range</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>v<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//[p1,p2) is the subsequence of [b:e) with the value v,using f for comparison; basically, a binary search for v</span>

		<span class="token operator">*</span><span class="token operator">*</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> c<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">binary_search</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// is 7 in c?</span>
		<span class="token comment">// ...</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// ...</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">void</span> <span class="token function">g</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> c<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
		<span class="token keyword">auto</span> p <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// probably slow: O(N); c needn’t be sorted</span>
		<span class="token keyword">auto</span> q <span class="token operator">=</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// probably fast: O(log(N)); c must be sorted</span>
		<span class="token comment">// ...</span>
		<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="merge" tabindex="-1"><a class="header-anchor" href="#merge" aria-hidden="true">#</a> merge()</h1><p>🪁 <strong>The merge algorithms combine two ordered (sorted) sequences into one:</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>p<span class="token operator">=</span><span class="token function">merge</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>b2<span class="token punctuation">,</span>e2<span class="token punctuation">,</span>out<span class="token punctuation">)</span> <span class="token comment">//Merge two sorted sequences [b2:e2) and [b:e) into [out:p)</span>
p<span class="token operator">=</span><span class="token function">merge</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>b2<span class="token punctuation">,</span>e2<span class="token punctuation">,</span>out<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//Merge two sorted sequences [b2:e2) and [b:e)into [out,out+p), using f as the comparison</span>
<span class="token function">inplace_merge</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>m<span class="token punctuation">,</span>e<span class="token punctuation">)</span> <span class="token comment">//Merge two sorted subsequences [b:m) and [m:e)into a sorted sequence [b:e)</span>
<span class="token function">inplace_merge</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>m<span class="token punctuation">,</span>e <span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//Merge two sorted subsequences [b:m) and [m:e)into a sorted sequence [b:e), using f as the comparison</span>
		vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> v <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
		list<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span> lst <span class="token punctuation">{</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">1.5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2.5</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// lst is in order</span>
		<span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// put v in order</span>
		vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span> v2<span class="token punctuation">;</span>
		<span class="token function">merge</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>lst<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>lst<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>back_inser <span class="token function">ter</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// merger v and lst into v2</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">double</span> x <span class="token operator">:</span> v2<span class="token punctuation">)</span>
		cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, &quot;</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span>
<span class="token comment">//For inserters, see §33.2.2. The output is:</span>
		<span class="token comment">//0.5, 1, 1.5, 2, 2, 2.5, 3, 4,</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="set-algorithms" tabindex="-1"><a class="header-anchor" href="#set-algorithms" aria-hidden="true">#</a> Set Algorithms</h1><p>🪁 <strong>These algorithms treat a sequence as a set of elements and provide the basic set operations. The input sequences are supposed to be sorted and the output sequences are also sorted.</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">includes</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>b2<span class="token punctuation">,</span>e2<span class="token punctuation">)</span> <span class="token comment">//Are all elements of [b:e) also in [b2:e2)?</span>
<span class="token function">includes</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>b2<span class="token punctuation">,</span>e2<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//Are all elements of [b:e) also in [b2:e2),using f for comparison?</span>
p<span class="token operator">=</span><span class="token function">set_union</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>b2<span class="token punctuation">,</span>e2<span class="token punctuation">,</span>out<span class="token punctuation">)</span> <span class="token comment">//Construct a sorted sequence [out:p)of elements that are in either [b:e) or [b2:e2)</span>
p<span class="token operator">=</span><span class="token function">set_union</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>b2<span class="token punctuation">,</span>e2<span class="token punctuation">,</span>out<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//Construct a sorted sequence [out:p)of elements that are in either [b:e) or [b2:e2),using f for comparison</span>
p<span class="token operator">=</span><span class="token function">set_intersection</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>b2<span class="token punctuation">,</span>e2<span class="token punctuation">,</span>out<span class="token punctuation">)</span> <span class="token comment">//Construct a sorted sequence [out:p)of elements that are in both [b:e) and [b2:e2)</span>
p<span class="token operator">=</span><span class="token function">set_intersection</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>b2<span class="token punctuation">,</span>e2<span class="token punctuation">,</span>out<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//Construct a sorted sequence [out:p)of elements that are in both [b:e) and [b2:e2),using f for comparison</span>
p<span class="token operator">=</span><span class="token function">set_difference</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>b2<span class="token punctuation">,</span>e2<span class="token punctuation">,</span>out<span class="token punctuation">)</span> <span class="token comment">//Construct a sorted sequence [out:p)of elements that are in [b:e) but not in [b2:e2)</span>
p<span class="token operator">=</span><span class="token function">set_difference</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>b2<span class="token punctuation">,</span>e2<span class="token punctuation">,</span>out<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//Construct a sorted sequence [out:p)of elements that are in [b:e) but not in [b2:e2),using f for comparison</span>
p<span class="token operator">=</span><span class="token function">set_symmetric_difference</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>b2<span class="token punctuation">,</span>e2<span class="token punctuation">,</span>out<span class="token punctuation">)</span> <span class="token comment">//Construct a sorted sequence [out:p)of elements that are in [b:e) or [b2:e2)but not in both</span>
p<span class="token operator">=</span><span class="token function">set_symmetric_difference</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>b2<span class="token punctuation">,</span>e2<span class="token punctuation">,</span>out<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//Construct a sorted sequence [out:p)of elements that are in [b:e) or [b2:e2)but not in both, using f for comparison</span>

			string s1 <span class="token operator">=</span> <span class="token string">&quot;qwertyasdfgzxcvb&quot;</span><span class="token punctuation">;</span>
			string s2 <span class="token operator">=</span> <span class="token string">&quot;poiuyasdfg/.,mnb&quot;</span><span class="token punctuation">;</span>
			<span class="token function">sort</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// the set algorithms require sorted sequences</span>
			<span class="token function">sort</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s2<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			string <span class="token function">s3</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>s2<span class="token punctuation">.</span>siz <span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token char">&#39;∗&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// set aside enough space for the largest possible result</span>
			cout <span class="token operator">&lt;&lt;</span> s3 <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
			<span class="token keyword">auto</span> up <span class="token operator">=</span> <span class="token function">set_union</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s2<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s3<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			cout <span class="token operator">&lt;&lt;</span> s3 <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> p <span class="token operator">=</span> s3<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> p<span class="token operator">!=</span>up<span class="token punctuation">;</span> <span class="token operator">++</span>p<span class="token punctuation">)</span>
			cout <span class="token operator">&lt;&lt;</span> ∗p<span class="token punctuation">;</span>
			cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
			s3<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>s2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token char">&#39;+&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			up <span class="token operator">=</span> <span class="token function">set_difference</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s2<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s3<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			cout <span class="token operator">&lt;&lt;</span> s3 <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> p <span class="token operator">=</span> s3<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> p<span class="token operator">!=</span>up<span class="token punctuation">;</span> <span class="token operator">++</span>p<span class="token punctuation">)</span>
			cout <span class="token operator">&lt;&lt;</span> ∗p<span class="token punctuation">;</span>
			cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
			<span class="token comment">//This little test produces:</span>
			<span class="token comment">//∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗</span>
			<span class="token comment">//,./abcdefgimnopqrstuvxyz</span>
			<span class="token comment">//ceqrtvwxz++++++++++++++++++++++</span>
			<span class="token comment">//ceqrtvwxz</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="heaps" tabindex="-1"><a class="header-anchor" href="#heaps" aria-hidden="true">#</a> Heaps</h1><p>🪁 <strong>A heap is a compact data structure that keeps the element with the highest value first. Think of a heap as a representation of a binary tree. The heap algorithms allow a programmer to treat a random-access sequence as a heap:</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">make_heap</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">)</span> <span class="token comment">//Make [b:e) ready to be used as a heap</span>
<span class="token function">make_heap</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//Make [b:e) ready to be used as a heap, using f for comparison</span>
<span class="token function">push_heap</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">)</span> <span class="token comment">//Add ∗(eï1) to the heap [b:eï1); afterward [b:e) is a heap</span>
<span class="token function">push_heap</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//Add an element to the heap [b:eï1), using f for comparison</span>
<span class="token function">pop_heap</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">)</span> <span class="token comment">//Remove ∗(eï1) from the heap [b:e); afterward, [b:eï1) is a heap</span>
<span class="token function">pop_heap</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//Remove element from the heap [b:e), using f for comparison</span>
<span class="token function">sort_heap</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">)</span> <span class="token comment">//Sort the heap [b:e)</span>
<span class="token function">sort_heap</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//Sort the heap [b:e), using f for comparison</span>
<span class="token function">is_heap</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">)</span> <span class="token comment">//Is [b:e) a heap?</span>
<span class="token function">is_heap</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//Is [b:e) a heap, using f for comparison?</span>
p<span class="token operator">=</span><span class="token function">is_heap_until</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">)</span> <span class="token comment">//p is the largest p such that [b:p) is a heap</span>
p<span class="token operator">=</span><span class="token function">is_heap_until</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//p is the largest p such that [b:p) is a heap, using f for comparison</span>

		string s <span class="token operator">=</span> <span class="token string">&quot;herewego&quot;</span><span class="token punctuation">;</span>
		<span class="token function">make_heap</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// rogheeew</span>
		<span class="token function">pop_heap</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// rogheeew</span>
		<span class="token function">pop_heap</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>ï<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ohgeeerw</span>
		<span class="token function">pop_heap</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>ï<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hegeeorw</span>
		∗<span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>ï<span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token char">&#39;f&#39;</span><span class="token punctuation">;</span>
		<span class="token function">push_heap</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>ï<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hegeefrw</span>
		∗<span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>ï<span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token char">&#39;x&#39;</span><span class="token punctuation">;</span>
		<span class="token function">push_heap</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>ï<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// xeheefge</span>
		∗<span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>ï<span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token char">&#39;y&#39;</span><span class="token punctuation">;</span>
		<span class="token function">push_heap</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// yxheefge</span>
		<span class="token function">sort_heap</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// eeefghxy</span>
		<span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// yxhgfeee**</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="lexicographical-compare" tabindex="-1"><a class="header-anchor" href="#lexicographical-compare" aria-hidden="true">#</a> lexicographical_compare()</h1><p>🪁 <strong>A lexicographical compare is the rule we use to order words in dictionaries</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">lexicographical_compare</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>b2<span class="token punctuation">,</span>e2<span class="token punctuation">)</span> <span class="token comment">//Is [b:e)&lt;[b2:e2)?</span>
<span class="token function">lexicographical_compare</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e <span class="token punctuation">,</span>b2<span class="token punctuation">,</span>e2<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//Is [b:e)&lt;[b2:e2), using f for element comparison?</span>

		string n1 <span class="token punctuation">{</span><span class="token string">&quot;10000&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
		string n2 <span class="token punctuation">{</span><span class="token string">&quot;999&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
		<span class="token keyword">bool</span> b1 <span class="token operator">=</span> <span class="token function">lexicographical_compare</span><span class="token punctuation">(</span>n1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n2<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// b1 == true</span>
		n1 <span class="token operator">=</span> <span class="token string">&quot;Zebra&quot;</span><span class="token punctuation">;</span>
		n2 <span class="token operator">=</span> <span class="token string">&quot;Aardvark&quot;</span><span class="token punctuation">;</span>
		<span class="token keyword">bool</span> b2 <span class="token operator">=</span> <span class="token function">lexicographical_compare</span><span class="token punctuation">(</span>n1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n2<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// b2 == false</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="min-and-max" tabindex="-1"><a class="header-anchor" href="#min-and-max" aria-hidden="true">#</a> Min and Max</h1><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>x<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token comment">//x is the smaller of a and b</span>
x<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//x is the smaller of a and b, using f for comparison</span>
x<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">{</span>elem<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">//x is the smallest element in {elem}</span>
x<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">{</span>elem<span class="token punctuation">}</span><span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//x is the smallest element in {elem},using f for the element comparison</span>
x<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token comment">//x is the larger of a and b</span>
x<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//x is the larger of a and b, using f for comparison</span>
x<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">{</span>elem<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">//x is the largest element in {elem}</span>
x<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">{</span>elem<span class="token punctuation">}</span><span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//x is the largest element in {elem},using f for the element comparison</span>
<span class="token function">pair</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">minmax</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token comment">//x is min(a,b) and y is max(a,b)</span>
<span class="token function">pair</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">minmax</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//x is min(a,b,f) and y is max(a,b,f)</span>
<span class="token function">pair</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">minmax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>elem<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">//x is min({elem}) and y is max({elem})</span>
<span class="token function">pair</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">minmax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>elem<span class="token punctuation">}</span><span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//x is min({elem},f) and y is max({elem},f)</span>
p<span class="token operator">=</span><span class="token function">min_element</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">)</span> <span class="token comment">//p points to the smallest element of [b:e) or e</span>
p<span class="token operator">=</span><span class="token function">min_element</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//p points to the smallest element of [b:e) or e,using f for the element comparison</span>
p<span class="token operator">=</span><span class="token function">max_element</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">)</span> <span class="token comment">//p points to the largest element of [b:e) or e</span>
p<span class="token operator">=</span><span class="token function">max_element</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//p points to the largest element of [b:e) or e,using f for the element comparison</span>
<span class="token function">pair</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">minmax_element</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">)</span> <span class="token comment">//x is min_element(b,e) and y is max_element(b,e)</span>
<span class="token function">pair</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">minmax_element</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token comment">//x is min_element(b,e,f) and y is max_element(b,e,f)</span>

		<span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
		<span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
		<span class="token operator">++</span><span class="token function">min</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// the result of min(x,y) is a const int&amp;</span>
		<span class="token operator">++</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token punctuation">,</span>y<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error : the result of min({x,y}) is an rvalue (an initializer_list is immutable)</span>

		string s <span class="token operator">=</span> <span class="token string">&quot;Large_Hadron_Collider&quot;</span><span class="token punctuation">;</span>
		<span class="token keyword">auto</span> p <span class="token operator">=</span> <span class="token function">minmax_element</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">char</span> c1<span class="token punctuation">,</span><span class="token keyword">char</span> c2<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">toupper</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token function">toupper</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;min==&quot;</span> <span class="token operator">&lt;&lt;</span> ∗<span class="token punctuation">(</span>p<span class="token punctuation">.</span>first<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39; &#39;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;max==&quot;</span> <span class="token operator">&lt;&lt;</span> ∗<span class="token punctuation">(</span>p<span class="token punctuation">.</span>second<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,61),e=[o];function c(u,i){return s(),a("div",null,e)}const k=n(p,[["render",c],["__file","STL Algorithms.html.vue"]]);export{k as default};
