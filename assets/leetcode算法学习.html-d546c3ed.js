const n=JSON.parse(`{"key":"v-2508f406","path":"/18Data_Structure/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0/leetcode%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0.html","title":"面试问题","lang":"zh-CN","frontmatter":{"title":"面试问题","article":true,"description":"算法学习 二分查找：给定升序数组和目标值，求目标值下标 while(letf&lt;=right){ int mid=left+(right-left)/2; if(nums[mid]&gt;target){ right=mind-1; }else if(nums[mid]&lt;target){ left=mid+1; }else{ return mid;//找到了 } } 移除元素：给定一个数组和移除的val,求数组新长度 //1. for (int i = 0; i &lt; size; i++) { if (nums[i] == val) { // 发现需要移除的元素，就将数组集体向前移动一位 for (int j = i + 1; j &lt; size; j++) { nums[j - 1] = nums[j]; } i--; // 因为下标i以后的数值都向前移动了一位，所以i也向前移动一位 size--; // 此时数组的大小-1 } } return size; //2. int slowIndex = 0;//用于表示有多少个不是目标值 for (int fastIndex = 0; fastIndex &lt; nums.size(); fastIndex++) { //快指针持续往前走，慢指针只有和目标值不相等才往前走 \\t\\t\\t\\t\\tif (val != nums[fastIndex]) {//如果不等于，那么 nums[slowIndex++] = nums[fastIndex]; } } return slowIndex; 有序数组平方和：给定一个非递减数组，求每个数字平方和形成的非递减新数组 //1. for(int i=0;i&lt;nums.size();i++){ \\tnums[i]*=nums[i];//先求平方 } sort(nums.begin(),nums.end());//后排序 //2. int k = nums.size() - 1; for (int i = 0, j = num.size() - 1; i &lt;= j;) { // 注意这里要i &lt;= j，因为最后要处理两个元素 \\t//边平方边排序,左边比右边小 \\tif(nums[i]*nums[i]&lt;nums[j]*nums[j]){ \\t\\t\\tresult[k--]=nums[j]//说明最大值右边的 \\t\\t\\tj--;右边往前移动 \\t}else{ \\t\\t\\tresult[k--]=nums[i]//说明大值是左边的 \\t\\t\\ti++;右边往前移动 \\t} } 长度最小的子数组：给定一个正整数s和一个正整数数组，求大于s的长度最小的子数组 int result=INT32_MAX;//由于要比较谁更小，所以要拿一个最大值进行比较 int sum=0;//子序列的和 int sublength=0;//子序列长度 for (int i = 0; i &lt; nums.size(); i++) { // 设置子序列起点为i \\tsum=0; \\tfor (int j = i; j &lt; nums.size(); j++) { // 设置子序列终止位置为j \\t\\tsum+=nums[j];//把起点和终点的值都加起来 \\t\\tif(sum&gt;s){ \\t\\t\\tsublength=j-i+1; \\t\\t\\tresult=result&lt;sublength?result:sublength; \\t\\t} \\t} } return result==INT_MAX32?0:result;//如果还是最大值，那说明没找到，一个循环都没进，所以返回0 螺旋数组：给定一个正整数n，生成一个包含 1 到 n^2 所有元素 vector&lt;vector&lt;int&gt;&gt; res(n, vector&lt;int&gt;(n, 0)); // 使用vector定义一个二维数组 int startx=0,starty=0;//每次循环的起点 int loop=n/2;//确定循环的次数：3--1（中间剩下一个点最后加），4--2 int mid=n/2; int count=1;//给矩阵赋值的函数 int offset=1;//控制每一圈遍历的长度 int i,j; while (loop --) { i = startx; j = starty; // 模拟填充上行从左到右(左闭右开) for (j = starty; j &lt; n - offset; j++) { \\t res[startx][j] = count++; } // 模拟填充右侧从上到下(左闭右开) // 模拟填充下行从右到左(左闭右开) // 模拟填充左侧从下到上(左闭右开) // 第二圈开始的时候，起始位置要各自加1， 例如：第一圈起始位置是(0, 0)，第二圈起始位置是(1, 1) startx++; starty++; \\t// offset 控制每一圈里每一条边遍历的长度 offset += 1; } if(n%2) res[mid][mid]=count;//奇数，把中间的值给填上 return res; 反转字符串：将输入的字符串反转过来。输入字符串以字符数组 char[] 的形式给出 for(int i=0;j=s.size()-1;i&lt;s.size()/2;i++,j--){ \\tswap(s[i],s[j]); } void swap(char &amp;s1,char &amp;s2){ \\tchar tmp=s1; \\ts1=s2; s2=tmp; } 反转字符串：给定一个字符串 s 和一个整数 k,每隔 2k 个字符的前 k 个字符进行反转 string reverseStr(string s,int k){ \\tfor(int i=0;i&lt;s.size();i+=2*k){ \\t\\t\\tif(i+k&lt;=s.size()){ \\t\\t\\t\\treverse(s.begin()+i,s.begin()+i+k) \\t\\t\\t}else{ \\t\\t\\t\\treverse(s.begin()+i,s.end()); \\t\\t\\t} \\t} \\treturn s; } 替换空格：把字符串 s 中的每个空格替换成\\"%20\\" 扩充数组到每个空格替换成\\"%20\\"之后的大小。然后从后向前替换空格，也就是双指针法 int count=0;//统计空格个数 int s_oldsize=s.size(); for(int i=0;i&lt;s.size();i++){ \\tif(s[i]==\\" \\") count++; } // 扩充字符串s的大小，也就是每个空格替换成\\"%20\\"之后的大小 s.resize(s.size() + count * 2);//因为之前有一个空格，所以加2*count就够了 int s_newsize=s.size(); //j&lt;i说明，空格补满了，前面都是字符了 for(int i=s_newsize-1,j=s_oldsize-1;j&lt;i;i--,j--){ \\tif(s[j]!=\\" \\") s[i]=s[j] \\telse{ \\t\\ts[i]=\\"0\\";s[i-1]=\\"2\\";s[i-2]=\\"%\\"; \\t\\ti=i-2;//因为还有i--，所以-2就够了 \\t}\\t\\t } ****翻转字符串里的单词：****输入: \\"the sky is blue\\"，输出:&nbsp;\\"blue is sky the\\" //移除多余的空格 void removeExtraSpaces(string&amp; s) { for (int i = s.size() - 1; i &gt; 0; i--) { if (s[i] == s[i - 1] &amp;&amp; s[i] == ' ') { s.erase(s.begin() + i); } } // 删除字符串最后面的空格 if (s.size() &gt; 0 &amp;&amp; s[s.size() - 1] == ' ') { s.erase(s.begin() + s.size() - 1); } // 删除字符串最前面的空格 if (s.size() &gt; 0 &amp;&amp; s[0] == ' ') { s.erase(s.begin()); } } \\t//反转字符串 void reverse(string&amp;s,int start,int end){ \\t\\tfor(int i=start,int j=end;i&lt;j;i++,j--){ \\t\\t swap(s[i],s[j]); \\t} } string reverseWords(string s) { removeExtraSpaces(s); //去除多余空格，保证单词之间之只有一个空格，且字符串首尾没空格。 reverse(s, 0, s.size() - 1); int start = 0; //removeExtraSpaces后保证第一个单词的开始下标一定是0。 for (int i = 0; i &lt;= s.size(); ++i) { if (i == s.size() || s[i] == ' ') { //到达空格或者串尾，说明一个单词结束。进行翻转。 reverse(s, start, i - 1); //翻转，注意是左闭右闭 []的翻转。 start = i + 1; //更新下一个单词的开始下标start } } return s; } 左旋转字符串：给定字符串和数字k，把前k个字符串放到末尾： 输入: s = \\"abcdefg\\", k = 2，输出:&nbsp;\\"cdefgab\\" string reverseLeftWords(string s, int n) { \\treverse(s.begin(),s.begin()+k);//s = \\"bacdefg\\" \\treverse(s.begin()k+1,s.end());//s=\\"bagfedc\\" \\treverse(s.begin(),s.end());//s=\\"cdefgab\\" } 深度优先遍历和广度优先遍历的区别 （1）深度优先遍历：对每一个可能的分支路径深入到不能再深入为止，而且每个结点只能访问一次。要特别注意的是，二叉树的深度优先遍历比较特殊，可以细分为先序遍历、中序遍历、后序遍历。具体说明如下： 先序遍历：对任一子树，先访问根，然后遍历其左子树，最后遍历其右子树。 中序遍历：对任一子树，先遍历其左子树，然后访问根，最后遍历其右子树。 后序遍历：对任一子树，先遍历其左子树，然后遍历其右子树，最后访问根。 （2）广度优先遍历：又叫层次遍历，从上往下对每一层依次访问，在每一层中，从左往右（也可以从右往左）访问结点，访问完一层就进入下一层，直到没有结点可以访问为止。","head":[["meta",{"property":"og:url","content":"https://tobeprozy.github.io/18Data_Structure/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0/leetcode%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0.html"}],["meta",{"property":"og:site_name","content":"南叔先生-开源笔记"}],["meta",{"property":"og:title","content":"面试问题"}],["meta",{"property":"og:description","content":"算法学习 二分查找：给定升序数组和目标值，求目标值下标 while(letf&lt;=right){ int mid=left+(right-left)/2; if(nums[mid]&gt;target){ right=mind-1; }else if(nums[mid]&lt;target){ left=mid+1; }else{ return mid;//找到了 } } 移除元素：给定一个数组和移除的val,求数组新长度 //1. for (int i = 0; i &lt; size; i++) { if (nums[i] == val) { // 发现需要移除的元素，就将数组集体向前移动一位 for (int j = i + 1; j &lt; size; j++) { nums[j - 1] = nums[j]; } i--; // 因为下标i以后的数值都向前移动了一位，所以i也向前移动一位 size--; // 此时数组的大小-1 } } return size; //2. int slowIndex = 0;//用于表示有多少个不是目标值 for (int fastIndex = 0; fastIndex &lt; nums.size(); fastIndex++) { //快指针持续往前走，慢指针只有和目标值不相等才往前走 \\t\\t\\t\\t\\tif (val != nums[fastIndex]) {//如果不等于，那么 nums[slowIndex++] = nums[fastIndex]; } } return slowIndex; 有序数组平方和：给定一个非递减数组，求每个数字平方和形成的非递减新数组 //1. for(int i=0;i&lt;nums.size();i++){ \\tnums[i]*=nums[i];//先求平方 } sort(nums.begin(),nums.end());//后排序 //2. int k = nums.size() - 1; for (int i = 0, j = num.size() - 1; i &lt;= j;) { // 注意这里要i &lt;= j，因为最后要处理两个元素 \\t//边平方边排序,左边比右边小 \\tif(nums[i]*nums[i]&lt;nums[j]*nums[j]){ \\t\\t\\tresult[k--]=nums[j]//说明最大值右边的 \\t\\t\\tj--;右边往前移动 \\t}else{ \\t\\t\\tresult[k--]=nums[i]//说明大值是左边的 \\t\\t\\ti++;右边往前移动 \\t} } 长度最小的子数组：给定一个正整数s和一个正整数数组，求大于s的长度最小的子数组 int result=INT32_MAX;//由于要比较谁更小，所以要拿一个最大值进行比较 int sum=0;//子序列的和 int sublength=0;//子序列长度 for (int i = 0; i &lt; nums.size(); i++) { // 设置子序列起点为i \\tsum=0; \\tfor (int j = i; j &lt; nums.size(); j++) { // 设置子序列终止位置为j \\t\\tsum+=nums[j];//把起点和终点的值都加起来 \\t\\tif(sum&gt;s){ \\t\\t\\tsublength=j-i+1; \\t\\t\\tresult=result&lt;sublength?result:sublength; \\t\\t} \\t} } return result==INT_MAX32?0:result;//如果还是最大值，那说明没找到，一个循环都没进，所以返回0 螺旋数组：给定一个正整数n，生成一个包含 1 到 n^2 所有元素 vector&lt;vector&lt;int&gt;&gt; res(n, vector&lt;int&gt;(n, 0)); // 使用vector定义一个二维数组 int startx=0,starty=0;//每次循环的起点 int loop=n/2;//确定循环的次数：3--1（中间剩下一个点最后加），4--2 int mid=n/2; int count=1;//给矩阵赋值的函数 int offset=1;//控制每一圈遍历的长度 int i,j; while (loop --) { i = startx; j = starty; // 模拟填充上行从左到右(左闭右开) for (j = starty; j &lt; n - offset; j++) { \\t res[startx][j] = count++; } // 模拟填充右侧从上到下(左闭右开) // 模拟填充下行从右到左(左闭右开) // 模拟填充左侧从下到上(左闭右开) // 第二圈开始的时候，起始位置要各自加1， 例如：第一圈起始位置是(0, 0)，第二圈起始位置是(1, 1) startx++; starty++; \\t// offset 控制每一圈里每一条边遍历的长度 offset += 1; } if(n%2) res[mid][mid]=count;//奇数，把中间的值给填上 return res; 反转字符串：将输入的字符串反转过来。输入字符串以字符数组 char[] 的形式给出 for(int i=0;j=s.size()-1;i&lt;s.size()/2;i++,j--){ \\tswap(s[i],s[j]); } void swap(char &amp;s1,char &amp;s2){ \\tchar tmp=s1; \\ts1=s2; s2=tmp; } 反转字符串：给定一个字符串 s 和一个整数 k,每隔 2k 个字符的前 k 个字符进行反转 string reverseStr(string s,int k){ \\tfor(int i=0;i&lt;s.size();i+=2*k){ \\t\\t\\tif(i+k&lt;=s.size()){ \\t\\t\\t\\treverse(s.begin()+i,s.begin()+i+k) \\t\\t\\t}else{ \\t\\t\\t\\treverse(s.begin()+i,s.end()); \\t\\t\\t} \\t} \\treturn s; } 替换空格：把字符串 s 中的每个空格替换成\\"%20\\" 扩充数组到每个空格替换成\\"%20\\"之后的大小。然后从后向前替换空格，也就是双指针法 int count=0;//统计空格个数 int s_oldsize=s.size(); for(int i=0;i&lt;s.size();i++){ \\tif(s[i]==\\" \\") count++; } // 扩充字符串s的大小，也就是每个空格替换成\\"%20\\"之后的大小 s.resize(s.size() + count * 2);//因为之前有一个空格，所以加2*count就够了 int s_newsize=s.size(); //j&lt;i说明，空格补满了，前面都是字符了 for(int i=s_newsize-1,j=s_oldsize-1;j&lt;i;i--,j--){ \\tif(s[j]!=\\" \\") s[i]=s[j] \\telse{ \\t\\ts[i]=\\"0\\";s[i-1]=\\"2\\";s[i-2]=\\"%\\"; \\t\\ti=i-2;//因为还有i--，所以-2就够了 \\t}\\t\\t } ****翻转字符串里的单词：****输入: \\"the sky is blue\\"，输出:&nbsp;\\"blue is sky the\\" //移除多余的空格 void removeExtraSpaces(string&amp; s) { for (int i = s.size() - 1; i &gt; 0; i--) { if (s[i] == s[i - 1] &amp;&amp; s[i] == ' ') { s.erase(s.begin() + i); } } // 删除字符串最后面的空格 if (s.size() &gt; 0 &amp;&amp; s[s.size() - 1] == ' ') { s.erase(s.begin() + s.size() - 1); } // 删除字符串最前面的空格 if (s.size() &gt; 0 &amp;&amp; s[0] == ' ') { s.erase(s.begin()); } } \\t//反转字符串 void reverse(string&amp;s,int start,int end){ \\t\\tfor(int i=start,int j=end;i&lt;j;i++,j--){ \\t\\t swap(s[i],s[j]); \\t} } string reverseWords(string s) { removeExtraSpaces(s); //去除多余空格，保证单词之间之只有一个空格，且字符串首尾没空格。 reverse(s, 0, s.size() - 1); int start = 0; //removeExtraSpaces后保证第一个单词的开始下标一定是0。 for (int i = 0; i &lt;= s.size(); ++i) { if (i == s.size() || s[i] == ' ') { //到达空格或者串尾，说明一个单词结束。进行翻转。 reverse(s, start, i - 1); //翻转，注意是左闭右闭 []的翻转。 start = i + 1; //更新下一个单词的开始下标start } } return s; } 左旋转字符串：给定字符串和数字k，把前k个字符串放到末尾： 输入: s = \\"abcdefg\\", k = 2，输出:&nbsp;\\"cdefgab\\" string reverseLeftWords(string s, int n) { \\treverse(s.begin(),s.begin()+k);//s = \\"bacdefg\\" \\treverse(s.begin()k+1,s.end());//s=\\"bagfedc\\" \\treverse(s.begin(),s.end());//s=\\"cdefgab\\" } 深度优先遍历和广度优先遍历的区别 （1）深度优先遍历：对每一个可能的分支路径深入到不能再深入为止，而且每个结点只能访问一次。要特别注意的是，二叉树的深度优先遍历比较特殊，可以细分为先序遍历、中序遍历、后序遍历。具体说明如下： 先序遍历：对任一子树，先访问根，然后遍历其左子树，最后遍历其右子树。 中序遍历：对任一子树，先遍历其左子树，然后访问根，最后遍历其右子树。 后序遍历：对任一子树，先遍历其左子树，然后遍历其右子树，最后访问根。 （2）广度优先遍历：又叫层次遍历，从上往下对每一层依次访问，在每一层中，从左往右（也可以从右往左）访问结点，访问完一层就进入下一层，直到没有结点可以访问为止。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-26T10:25:41.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-26T10:25:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"面试问题\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-04-26T10:25:41.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1682504741000,"updatedTime":1682504741000,"contributors":[{"name":"tobeprozy","email":"904762096@qq.com","commits":1}]},"readingTime":{"minutes":5.64,"words":1691},"filePathRelative":"18Data_Structure/数据结构编程练习/leetcode算法学习.md","localizedDate":"2023年4月26日","excerpt":"<h1> 算法学习</h1>\\n<ul>\\n<li>\\n<p><strong>二分查找：给定升序数组和目标值，求目标值下标</strong></p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">while</span><span class=\\"token punctuation\\">(</span>letf<span class=\\"token operator\\">&lt;=</span>right<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> mid<span class=\\"token operator\\">=</span>left<span class=\\"token operator\\">+</span><span class=\\"token punctuation\\">(</span>right<span class=\\"token operator\\">-</span>left<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">/</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>nums<span class=\\"token punctuation\\">[</span>mid<span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">&gt;</span>target<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n        right<span class=\\"token operator\\">=</span>mind<span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>nums<span class=\\"token punctuation\\">[</span>mid<span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">&lt;</span>target<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n        left<span class=\\"token operator\\">=</span>mid<span class=\\"token operator\\">+</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token keyword\\">else</span><span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> mid<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//找到了</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p><strong>移除元素：给定一个数组和移除的val,求数组新长度</strong></p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token comment\\">//1.</span>\\n<span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> size<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>nums<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">==</span> val<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token comment\\">// 发现需要移除的元素，就将数组集体向前移动一位</span>\\n                <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> j <span class=\\"token operator\\">=</span> i <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span> j <span class=\\"token operator\\">&lt;</span> size<span class=\\"token punctuation\\">;</span> j<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                    nums<span class=\\"token punctuation\\">[</span>j <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> nums<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span>\\n                i<span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 因为下标i以后的数值都向前移动了一位，所以i也向前移动一位</span>\\n                size<span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 此时数组的大小-1</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">return</span> size<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">//2.</span>\\n<span class=\\"token keyword\\">int</span> slowIndex <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//用于表示有多少个不是目标值</span>\\n        <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> fastIndex <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> fastIndex <span class=\\"token operator\\">&lt;</span> nums<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> fastIndex<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n          <span class=\\"token comment\\">//快指针持续往前走，慢指针只有和目标值不相等才往前走  </span>\\n\\t\\t\\t\\t\\t<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>val <span class=\\"token operator\\">!=</span> nums<span class=\\"token punctuation\\">[</span>fastIndex<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token comment\\">//如果不等于，那么</span>\\n                nums<span class=\\"token punctuation\\">[</span>slowIndex<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> nums<span class=\\"token punctuation\\">[</span>fastIndex<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">return</span> slowIndex<span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p><strong>有序数组平方和：给定一个非递减数组，求每个数字平方和形成的非递减新数组</strong></p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token comment\\">//1.</span>\\n<span class=\\"token keyword\\">for</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i<span class=\\"token operator\\">=</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>i<span class=\\"token operator\\">&lt;</span>nums<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\tnums<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">*=</span>nums<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//先求平方</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token function\\">sort</span><span class=\\"token punctuation\\">(</span>nums<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">begin</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>nums<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">end</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//后排序</span>\\n\\n<span class=\\"token comment\\">//2.</span>\\n<span class=\\"token keyword\\">int</span> k <span class=\\"token operator\\">=</span> nums<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> j <span class=\\"token operator\\">=</span> num<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;=</span> j<span class=\\"token punctuation\\">;</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token comment\\">// 注意这里要i &lt;= j，因为最后要处理两个元素</span>\\n\\t<span class=\\"token comment\\">//边平方边排序,左边比右边小</span>\\n\\t<span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>nums<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">*</span>nums<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">&lt;</span>nums<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">*</span>nums<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t\\t\\tresult<span class=\\"token punctuation\\">[</span>k<span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">=</span>nums<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span><span class=\\"token comment\\">//说明最大值右边的</span>\\n\\t\\t\\tj<span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">;</span>右边往前移动\\n\\t<span class=\\"token punctuation\\">}</span><span class=\\"token keyword\\">else</span><span class=\\"token punctuation\\">{</span>\\n\\t\\t\\tresult<span class=\\"token punctuation\\">[</span>k<span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">=</span>nums<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token comment\\">//说明大值是左边的</span>\\n\\t\\t\\ti<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>右边往前移动\\n\\t<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p><strong>长度最小的子数组：给定一个正整数s和一个正整数数组，求大于s的长度最小的子数组</strong></p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">int</span> result<span class=\\"token operator\\">=</span>INT32_MAX<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//由于要比较谁更小，所以要拿一个最大值进行比较</span>\\n<span class=\\"token keyword\\">int</span> sum<span class=\\"token operator\\">=</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//子序列的和</span>\\n<span class=\\"token keyword\\">int</span> sublength<span class=\\"token operator\\">=</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//子序列长度</span>\\n<span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> nums<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token comment\\">// 设置子序列起点为i</span>\\n\\tsum<span class=\\"token operator\\">=</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> j <span class=\\"token operator\\">=</span> i<span class=\\"token punctuation\\">;</span> j <span class=\\"token operator\\">&lt;</span> nums<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> j<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token comment\\">// 设置子序列终止位置为j</span>\\n\\t\\tsum<span class=\\"token operator\\">+=</span>nums<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//把起点和终点的值都加起来</span>\\n\\t\\t<span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>sum<span class=\\"token operator\\">&gt;</span>s<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t\\t\\tsublength<span class=\\"token operator\\">=</span>j<span class=\\"token operator\\">-</span>i<span class=\\"token operator\\">+</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\tresult<span class=\\"token operator\\">=</span>result<span class=\\"token operator\\">&lt;</span>sublength<span class=\\"token operator\\">?</span>result<span class=\\"token operator\\">:</span>sublength<span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">return</span> result<span class=\\"token operator\\">==</span>INT_MAX32<span class=\\"token operator\\">?</span><span class=\\"token number\\">0</span><span class=\\"token operator\\">:</span>result<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//如果还是最大值，那说明没找到，一个循环都没进，所以返回0</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p><strong>螺旋数组：给定一个正整数n，生成一个包含 1 到 n^2 所有元素</strong></p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code>vector<span class=\\"token operator\\">&lt;</span>vector<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;&gt;</span> <span class=\\"token function\\">res</span><span class=\\"token punctuation\\">(</span>n<span class=\\"token punctuation\\">,</span> <span class=\\"token generic-function\\"><span class=\\"token function\\">vector</span><span class=\\"token generic class-name\\"><span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span></span></span><span class=\\"token punctuation\\">(</span>n<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 使用vector定义一个二维数组</span>\\n<span class=\\"token keyword\\">int</span> startx<span class=\\"token operator\\">=</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span>starty<span class=\\"token operator\\">=</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//每次循环的起点</span>\\n<span class=\\"token keyword\\">int</span> loop<span class=\\"token operator\\">=</span>n<span class=\\"token operator\\">/</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//确定循环的次数：3--1（中间剩下一个点最后加），4--2</span>\\n<span class=\\"token keyword\\">int</span> mid<span class=\\"token operator\\">=</span>n<span class=\\"token operator\\">/</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span> count<span class=\\"token operator\\">=</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//给矩阵赋值的函数</span>\\n<span class=\\"token keyword\\">int</span> offset<span class=\\"token operator\\">=</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//控制每一圈遍历的长度</span>\\n<span class=\\"token keyword\\">int</span> i<span class=\\"token punctuation\\">,</span>j<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>loop <span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    i <span class=\\"token operator\\">=</span> startx<span class=\\"token punctuation\\">;</span>\\n    j <span class=\\"token operator\\">=</span> starty<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// 模拟填充上行从左到右(左闭右开)</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span>j <span class=\\"token operator\\">=</span> starty<span class=\\"token punctuation\\">;</span> j <span class=\\"token operator\\">&lt;</span> n <span class=\\"token operator\\">-</span> offset<span class=\\"token punctuation\\">;</span> j<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t     res<span class=\\"token punctuation\\">[</span>startx<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> count<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n     <span class=\\"token punctuation\\">}</span>\\n   <span class=\\"token comment\\">// 模拟填充右侧从上到下(左闭右开)</span>\\n   <span class=\\"token comment\\">// 模拟填充下行从右到左(左闭右开)</span>\\n   <span class=\\"token comment\\">// 模拟填充左侧从下到上(左闭右开)</span>\\n   <span class=\\"token comment\\">// 第二圈开始的时候，起始位置要各自加1， 例如：第一圈起始位置是(0, 0)，第二圈起始位置是(1, 1)</span>\\n   startx<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n   starty<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token comment\\">// offset 控制每一圈里每一条边遍历的长度</span>\\n  offset <span class=\\"token operator\\">+=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>n<span class=\\"token operator\\">%</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span> res<span class=\\"token punctuation\\">[</span>mid<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">[</span>mid<span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">=</span>count<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//奇数，把中间的值给填上</span>\\n<span class=\\"token keyword\\">return</span> res<span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p><strong>反转字符串：将输入的字符串反转过来。输入字符串以字符数组 char[] 的形式给出</strong></p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">for</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i<span class=\\"token operator\\">=</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>j<span class=\\"token operator\\">=</span>s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>i<span class=\\"token operator\\">&lt;</span>s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">/</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span>i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">,</span>j<span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token function\\">swap</span><span class=\\"token punctuation\\">(</span>s<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>s<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">swap</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">&amp;</span>s1<span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">&amp;</span>s2<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">char</span> tmp<span class=\\"token operator\\">=</span>s1<span class=\\"token punctuation\\">;</span>\\n\\ts1<span class=\\"token operator\\">=</span>s2<span class=\\"token punctuation\\">;</span>\\n  s2<span class=\\"token operator\\">=</span>tmp<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p><strong>反转字符串：给定一个字符串 s 和一个整数 k,每隔 2k 个字符的前 k 个字符进行反转</strong></p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code>string <span class=\\"token function\\">reverseStr</span><span class=\\"token punctuation\\">(</span>string s<span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">int</span> k<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">for</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i<span class=\\"token operator\\">=</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>i<span class=\\"token operator\\">&lt;</span>s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>i<span class=\\"token operator\\">+=</span><span class=\\"token number\\">2</span><span class=\\"token operator\\">*</span>k<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t<span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>i<span class=\\"token operator\\">+</span>k<span class=\\"token operator\\">&lt;=</span>s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t\\t<span class=\\"token function\\">reverse</span><span class=\\"token punctuation\\">(</span>s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">begin</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">+</span>i<span class=\\"token punctuation\\">,</span>s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">begin</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">+</span>i<span class=\\"token operator\\">+</span>k<span class=\\"token punctuation\\">)</span>\\n\\t\\t\\t<span class=\\"token punctuation\\">}</span><span class=\\"token keyword\\">else</span><span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t\\t<span class=\\"token function\\">reverse</span><span class=\\"token punctuation\\">(</span>s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">begin</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">+</span>i<span class=\\"token punctuation\\">,</span>s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">end</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token keyword\\">return</span> s<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p><strong>替换空格：把字符串 s 中的每个空格替换成\\"%20\\"</strong></p>\\n<p><strong>扩充数组到每个空格替换成\\"%20\\"之后的大小。然后从后向前替换空格，也就是双指针法</strong></p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">int</span> count<span class=\\"token operator\\">=</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//统计空格个数</span>\\n<span class=\\"token keyword\\">int</span> s_oldsize<span class=\\"token operator\\">=</span>s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">for</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i<span class=\\"token operator\\">=</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>i<span class=\\"token operator\\">&lt;</span>s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>s<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">==</span><span class=\\"token string\\">\\" \\"</span><span class=\\"token punctuation\\">)</span> count<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">// 扩充字符串s的大小，也就是每个空格替换成\\"%20\\"之后的大小</span>\\ns<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">resize</span><span class=\\"token punctuation\\">(</span>s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> count <span class=\\"token operator\\">*</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//因为之前有一个空格，所以加2*count就够了</span>\\n<span class=\\"token keyword\\">int</span> s_newsize<span class=\\"token operator\\">=</span>s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">//j&lt;i说明，空格补满了，前面都是字符了</span>\\n<span class=\\"token keyword\\">for</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i<span class=\\"token operator\\">=</span>s_newsize<span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span>j<span class=\\"token operator\\">=</span>s_oldsize<span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>j<span class=\\"token operator\\">&lt;</span>i<span class=\\"token punctuation\\">;</span>i<span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">,</span>j<span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>s<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">!=</span><span class=\\"token string\\">\\" \\"</span><span class=\\"token punctuation\\">)</span> s<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">=</span>s<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span>\\n\\t<span class=\\"token keyword\\">else</span><span class=\\"token punctuation\\">{</span>\\n\\t\\ts<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"0\\"</span><span class=\\"token punctuation\\">;</span>s<span class=\\"token punctuation\\">[</span>i<span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"2\\"</span><span class=\\"token punctuation\\">;</span>s<span class=\\"token punctuation\\">[</span>i<span class=\\"token operator\\">-</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"%\\"</span><span class=\\"token punctuation\\">;</span>\\n\\t\\ti<span class=\\"token operator\\">=</span>i<span class=\\"token operator\\">-</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//因为还有i--，所以-2就够了</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\t\\t\\n<span class=\\"token punctuation\\">}</span>\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>****翻转字符串里的单词：****输入: \\"the sky is blue\\"，输出:&nbsp;\\"blue is sky the\\"</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token comment\\">//移除多余的空格</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">removeExtraSpaces</span><span class=\\"token punctuation\\">(</span>string<span class=\\"token operator\\">&amp;</span> s<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>s<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">==</span> s<span class=\\"token punctuation\\">[</span>i <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">&amp;&amp;</span> s<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">==</span> <span class=\\"token char\\">' '</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">erase</span><span class=\\"token punctuation\\">(</span>s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">begin</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> i<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token comment\\">// 删除字符串最后面的空格</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">&amp;&amp;</span> s<span class=\\"token punctuation\\">[</span>s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">==</span> <span class=\\"token char\\">' '</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">erase</span><span class=\\"token punctuation\\">(</span>s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">begin</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token comment\\">// 删除字符串最前面的空格</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">&amp;&amp;</span> s<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">==</span> <span class=\\"token char\\">' '</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">erase</span><span class=\\"token punctuation\\">(</span>s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">begin</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token comment\\">//反转字符串</span>\\n <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">reverse</span><span class=\\"token punctuation\\">(</span>string<span class=\\"token operator\\">&amp;</span>s<span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">int</span> start<span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">int</span> end<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">for</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i<span class=\\"token operator\\">=</span>start<span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">int</span> j<span class=\\"token operator\\">=</span>end<span class=\\"token punctuation\\">;</span>i<span class=\\"token operator\\">&lt;</span>j<span class=\\"token punctuation\\">;</span>i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">,</span>j<span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t\\t <span class=\\"token function\\">swap</span><span class=\\"token punctuation\\">(</span>s<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>s<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\nstring <span class=\\"token function\\">reverseWords</span><span class=\\"token punctuation\\">(</span>string s<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">removeExtraSpaces</span><span class=\\"token punctuation\\">(</span>s<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">//去除多余空格，保证单词之间之只有一个空格，且字符串首尾没空格。</span>\\n        <span class=\\"token function\\">reverse</span><span class=\\"token punctuation\\">(</span>s<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span> start <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">//removeExtraSpaces后保证第一个单词的开始下标一定是0。</span>\\n        <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;=</span> s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token operator\\">++</span>i<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>i <span class=\\"token operator\\">==</span> s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">||</span> s<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">==</span> <span class=\\"token char\\">' '</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token comment\\">//到达空格或者串尾，说明一个单词结束。进行翻转。</span>\\n                <span class=\\"token function\\">reverse</span><span class=\\"token punctuation\\">(</span>s<span class=\\"token punctuation\\">,</span> start<span class=\\"token punctuation\\">,</span> i <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">//翻转，注意是左闭右闭 []的翻转。</span>\\n                start <span class=\\"token operator\\">=</span> i <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">//更新下一个单词的开始下标start</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">return</span> s<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p><strong>左旋转字符串：给定字符串和数字k，把前k个字符串放到末尾：</strong> 输入: s = \\"abcdefg\\", k = 2，输出:&nbsp;\\"cdefgab\\"</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code>\\nstring <span class=\\"token function\\">reverseLeftWords</span><span class=\\"token punctuation\\">(</span>string s<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> n<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token function\\">reverse</span><span class=\\"token punctuation\\">(</span>s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">begin</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">begin</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">+</span>k<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//s = \\"bacdefg\\"</span>\\n\\t<span class=\\"token function\\">reverse</span><span class=\\"token punctuation\\">(</span>s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">begin</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>k<span class=\\"token operator\\">+</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span>s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">end</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//s=\\"bagfedc\\"</span>\\n\\t<span class=\\"token function\\">reverse</span><span class=\\"token punctuation\\">(</span>s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">begin</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">end</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//s=\\"cdefgab\\"</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>深度优先遍历和广度优先遍历的区别</p>\\n<p>（1）深度优先遍历：对<strong>每一个可能的分支路径深入到不能再深入为止</strong>，而且每个结点只能访问一次。要特别注意的是，二叉树的深度优先遍历比较特殊，可以细分为先序遍历、中序遍历、后序遍历。具体说明如下：</p>\\n<ul>\\n<li>先序遍历：对任一子树，先访问根，然后遍历其左子树，最后遍历其右子树。</li>\\n<li>中序遍历：对任一子树，先遍历其左子树，然后访问根，最后遍历其右子树。</li>\\n<li>后序遍历：对任一子树，先遍历其左子树，然后遍历其右子树，最后访问根。</li>\\n</ul>\\n<p>（2）广度优先遍历：又叫层次遍历，从上往下对每一层依次访问，在每一层中，从左往右（也可以从右往左）访问结点，访问完一层就进入下一层，直到没有结点可以访问为止。</p>\\n</li>\\n</ul>","autoDesc":true}`);export{n as data};
