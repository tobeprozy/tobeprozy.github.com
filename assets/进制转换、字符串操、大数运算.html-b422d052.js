import{_ as p,Y as e,Z as o,$ as n,a0 as s,a1 as c,a2 as a,D as l}from"./framework-39b9cf04.js";const i={},u=a(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>进制转换、字符串操、大数运算</p></div><h1 id="进制转换、字符串操、大数运算" tabindex="-1"><a class="header-anchor" href="#进制转换、字符串操、大数运算" aria-hidden="true">#</a> 进制转换、字符串操、大数运算</h1><h1 id="一、进制转换" tabindex="-1"><a class="header-anchor" href="#一、进制转换" aria-hidden="true">#</a> 一、进制转换</h1><h2 id="_1-1-itoa" tabindex="-1"><a class="header-anchor" href="#_1-1-itoa" aria-hidden="true">#</a> 1.1 itoa</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">char</span><span class="token operator">*</span><span class="token function">itoa</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span>string<span class="token punctuation">,</span><span class="token keyword">int</span> radix<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  
<span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  
<span class="token function">_itoa</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> str<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//c++中一般用_itoa，用itoa也行,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-2-sprintf-函数" tabindex="-1"><a class="header-anchor" href="#_1-2-sprintf-函数" aria-hidden="true">#</a> 1.2**sprintf()**函数</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//（可以将一个10进制数转换为指定格式的n进制字符串）</span>
<span class="token keyword">int</span> <span class="token function">sprintf</span><span class="token punctuation">(</span> <span class="token keyword">char</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span> <span class="token punctuation">[</span> argument<span class="token punctuation">]</span> … <span class="token punctuation">)</span>

<span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">sprintf</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//十进制输出产生&quot;123&quot;</span>
<span class="token function">sprintf</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">&quot;%4d%4d&quot;</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">4567</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//指定宽度不足的左边补空格，产生：&quot; 1234567&quot;</span>
<span class="token function">sprintf</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">&quot;%8o&quot;</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//八进制输出，宽度占8个位置</span>
<span class="token function">sprintf</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">&quot;%8x&quot;</span><span class="token punctuation">,</span> <span class="token number">4567</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//小写16 进制，宽度占8 个位置，右对齐</span>
<span class="token function">sprintf</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">&quot;%10.3f&quot;</span><span class="token punctuation">,</span> <span class="token number">3.1415626</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//产生：&quot; 3.142&quot;</span>
<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token function">sprintf</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">&quot;%.2f&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//注意这是不对的</span>
<span class="token function">sprintf</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">&quot;%.2f&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//要按照这种方式才行</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),r={id:"_1-3-字符串流string-stream",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#_1-3-字符串流string-stream","aria-hidden":"true"},"#",-1),d={href:"https://so.csdn.net/so/search?q=stream&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},m=a(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>string s<span class="token operator">=</span><span class="token string">&quot;20&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> a<span class="token punctuation">;</span>
stringstream ss<span class="token punctuation">;</span>
ss<span class="token operator">&lt;&lt;</span>hex<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">;</span>    <span class="token comment">//以16进制读入流中</span>
ss<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">;</span>        <span class="token comment">//10进制int型输出</span>

string s1<span class="token punctuation">,</span>s2<span class="token punctuation">;</span>
<span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span>
stringstream ss<span class="token punctuation">;</span>
ss<span class="token operator">&lt;&lt;</span>oct<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">;</span>        <span class="token comment">//10进制转成八进制读入流中，再以字符串输出</span>
ss<span class="token operator">&gt;&gt;</span>s1<span class="token punctuation">;</span>            
cout<span class="token operator">&lt;&lt;</span>s1<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token comment">//输出：36</span>
ss<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//不清空可能会出错。</span>
ss<span class="token operator">&lt;&lt;</span>hex<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">;</span>         <span class="token comment">//10进制转成十六进制读入流中，，再以字符串输出</span>
ss<span class="token operator">&gt;&gt;</span>s2<span class="token punctuation">;</span>            
cout<span class="token operator">&lt;&lt;</span>s2<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token comment">//输出：1e</span>

cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;36的8进制:&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>oct <span class="token operator">&lt;&lt;</span> <span class="token number">36</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;36的10进制&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>dec <span class="token operator">&lt;&lt;</span> <span class="token number">36</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;36的16进制:&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>hex <span class="token operator">&lt;&lt;</span> <span class="token number">36</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;36的2进制: &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token generic-function"><span class="token function">bitset</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">8</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-4-十进制转2进制方法" tabindex="-1"><a class="header-anchor" href="#_1-4-十进制转2进制方法" aria-hidden="true">#</a> 1.4 十进制转2进制方法</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">Transform</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>m<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">;</span> i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        m<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>n<span class="token operator">&gt;&gt;</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//与1做位操作，前面位数均为0</span>
        <span class="token comment">//cout&lt;&lt;(n);//输出二进制</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> m<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="二、字符串转数字" tabindex="-1"><a class="header-anchor" href="#二、字符串转数字" aria-hidden="true">#</a> 二、字符串转数字</h1><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//使用stoi()</span>
string <span class="token function">s</span><span class="token punctuation">(</span><span class="token string">&quot;12345&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> <span class="token keyword">long</span> a <span class="token operator">=</span> <span class="token function">stoi</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//使用atoi()</span>
<span class="token keyword">char</span> str3<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;3245345&quot;</span><span class="token punctuation">;</span>
<span class="token comment">//数字简单，所以转数字一个参数 </span>
<span class="token keyword">long</span> <span class="token keyword">long</span> a <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//使用 sscanf() 映射</span>
<span class="token keyword">long</span> <span class="token keyword">long</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> str5<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;661234544&quot;</span><span class="token punctuation">;</span>
<span class="token function">sscanf</span><span class="token punctuation">(</span>str5<span class="token punctuation">,</span> <span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//从左至右，字符串转数字</span>

<span class="token comment">//自定义</span>
<span class="token keyword">void</span> <span class="token function">myatoi</span><span class="token punctuation">(</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        temp<span class="token operator">=</span>temp<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    num<span class="token operator">=</span>temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="三、数字转字符串" tabindex="-1"><a class="header-anchor" href="#三、数字转字符串" aria-hidden="true">#</a> 三、数字转字符串</h1><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//to_string()</span>
<span class="token keyword">long</span> <span class="token keyword">long</span> m <span class="token operator">=</span> <span class="token number">1234566700</span><span class="token punctuation">;</span>
string str <span class="token operator">=</span> <span class="token function">to_string</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//系统提供数字转字符</span>

<span class="token comment">//itoa()</span>
<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//字符串比较麻烦，所以转字符串三个参数，我是这么记得(手动滑稽） </span>
<span class="token function">itoa</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>str2<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//第一个参数为整数，第二个为字符串(char*)，第三个为进制 </span>

<span class="token comment">//sprintf() 映射</span>
<span class="token keyword">long</span> <span class="token keyword">long</span> b <span class="token operator">=</span> <span class="token number">1234560</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> str4<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">sprintf</span><span class="token punctuation">(</span>str4<span class="token punctuation">,</span> <span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//从右至左，把数转换为字符串</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数字逐位放入vector</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">privec</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> vec<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">numTovec</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//#include&lt;string&gt;</span>
    string stra <span class="token operator">=</span> <span class="token function">to_string</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//系统提供数字转字符</span>
    string strb <span class="token operator">=</span> <span class="token function">to_string</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//系统提供数字转字符</span>

    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">numa</span><span class="token punctuation">(</span>stra<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">numb</span><span class="token punctuation">(</span>strb<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> ch<span class="token operator">:</span>stra<span class="token punctuation">)</span><span class="token punctuation">{</span>
        numa<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>ch<span class="token operator">-</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">privec</span><span class="token punctuation">(</span>numa<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> ch<span class="token operator">:</span>strb<span class="token punctuation">)</span><span class="token punctuation">{</span>
        numb<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>ch<span class="token operator">-</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">privec</span><span class="token punctuation">(</span>numb<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="四、精度控制" tabindex="-1"><a class="header-anchor" href="#四、精度控制" aria-hidden="true">#</a> 四、精度控制</h1><h2 id="_4-1-利用字符串改变数字位数" tabindex="-1"><a class="header-anchor" href="#_4-1-利用字符串改变数字位数" aria-hidden="true">#</a> 4.1 利用字符串改变数字位数</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">float</span> abc<span class="token operator">=</span><span class="token number">1.28837</span><span class="token punctuation">;</span>
string str<span class="token operator">=</span><span class="token function">to_string</span><span class="token punctuation">(</span>abc<span class="token punctuation">)</span><span class="token punctuation">;</span>
cout<span class="token operator">&lt;&lt;</span>str<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
str<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-2利用字符串流" tabindex="-1"><a class="header-anchor" href="#_4-2利用字符串流" aria-hidden="true">#</a> 4.2利用字符串流</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">sprintf</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">&quot;%.2f&quot;</span><span class="token punctuation">,</span> <span class="token number">1234.765</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//十进制输出产生&quot;1234.77&quot;</span>
cout<span class="token operator">&lt;&lt;</span>s<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token function">sprintf</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">&quot;%.2f&quot;</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//十进制输出产生&quot;123.00&quot;</span>
cout<span class="token operator">&lt;&lt;</span>s<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>

<span class="token comment">//#include &lt;sstream&gt; </span>
<span class="token comment">//#include &lt;iomanip&gt;</span>
<span class="token keyword">float</span> fnum<span class="token operator">=</span><span class="token number">1.2456</span><span class="token punctuation">;</span>
stringstream ss<span class="token punctuation">;</span> 
ss <span class="token operator">&lt;&lt;</span> fixed <span class="token operator">&lt;&lt;</span> <span class="token function">setprecision</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> fnum<span class="token punctuation">;</span> 
ss <span class="token operator">&gt;&gt;</span> fnum<span class="token punctuation">;</span> 
cout<span class="token operator">&lt;&lt;</span>fnum<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="五、大数运算" tabindex="-1"><a class="header-anchor" href="#五、大数运算" aria-hidden="true">#</a> 五、大数运算</h1><h2 id="_5-1-乘法" tabindex="-1"><a class="header-anchor" href="#_5-1-乘法" aria-hidden="true">#</a> 5.1 乘法</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;deque&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;sstream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

std<span class="token double-colon punctuation">::</span>string <span class="token function">BigNumMultiply</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string s1<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string s2<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//记录最终结果</span>
    std<span class="token double-colon punctuation">::</span>string res <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">//使用deque是因为出现进位时可以在队列前插入数据，效率比vector高，大小设为最小</span>
    <span class="token comment">//两个数相乘的结果肯定会比两个数的位数之和小：99*99&lt;100*100&lt;6位数，那就是5位数</span>
    std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">vec</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> s2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//s1=125</span>
    <span class="token comment">//s2=25</span>
    <span class="token comment">//正常算法</span>
    <span class="token comment">//      1  2  5</span>
    <span class="token comment">//         2  5</span>
    <span class="token comment">//-----------------</span>
    <span class="token comment">//           25</span>
    <span class="token comment">//          10</span>
    <span class="token comment">//          5</span>
    <span class="token comment">//          10</span>
    <span class="token comment">//          4</span>
    <span class="token comment">//         2</span>
    <span class="token comment">//         3125</span>
    <span class="token comment">//倒序乘法</span>
    <span class="token comment">//vec 0 0 0 0 0 0 0 0 0 </span>
    <span class="token comment">//vec:2 5</span>
    <span class="token comment">//vec:  4 10 </span>
    <span class="token comment">//vec:    10 25</span>
    <span class="token comment">//vec:2 9 20 25</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> s2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//第0个数相乘，错0位，第1个数相乘错1位</span>
            vec<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">(</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>s2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//记录相乘结果</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//进位处理</span>
    <span class="token keyword">int</span> addflag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">//倒序遍历，是因为最左边的值为最高位，最右边的值在最低位，进位运算要从低位开始</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> vec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> temp <span class="token operator">=</span> vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> addflag<span class="token punctuation">;</span> <span class="token comment">//当前值加上进位值</span>
        vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>          <span class="token comment">//当前值</span>
        addflag <span class="token operator">=</span> temp <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>         <span class="token comment">//进位值</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">//看最后一位有没有进位，如果有进位，将进位加到队列头部</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>addflag <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> t <span class="token operator">=</span> addflag <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
        vec<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        addflag <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> c <span class="token operator">:</span> vec<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>ostringstream ss<span class="token punctuation">;</span>
        ss <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">;</span>
        res <span class="token operator">=</span> res <span class="token operator">+</span> ss<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>string str1<span class="token operator">=</span><span class="token string">&quot;125&quot;</span><span class="token punctuation">,</span>str2<span class="token operator">=</span><span class="token string">&quot;25&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">//while (std::cin &gt;&gt; str1 &gt;&gt; str2)</span>
    <span class="token comment">//{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> str1 <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;*&quot;</span> <span class="token operator">&lt;&lt;</span> str2 <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;=&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">BigNumMultiply</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token comment">//}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17);function v(b,g){const t=l("ExternalLinkIcon");return e(),o("div",null,[u,n("h2",r,[k,s(" 1.3 字符串流string，"),n("a",d,[s("stream"),c(t)])]),m])}const f=p(i,[["render",v],["__file","进制转换、字符串操、大数运算.html.vue"]]);export{f as default};
