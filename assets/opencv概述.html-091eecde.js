const n=JSON.parse(`{"key":"v-458ac3fc","path":"/03Computer_Vision/Opencv/opencv%E6%A6%82%E8%BF%B0.html","title":"Opencv","lang":"zh-CN","frontmatter":{"title":"Opencv","article":true,"date":"2023-03-31T00:00:00.000Z","category":["计算机视觉"],"tag":["Opencv","算法"],"order":null,"icon":"robotics","description":"提示 opencv 1.输入、显示和保存图像 读取：imread() 显示：imshow() 保存：imwrite() 窗口：namedWindow() 2.读取、显示、保存和处理视频 VideoCapture()，参数为0为读取摄像头，参数为文件名读取对应视频文件 3.画线，画圆，画矩形，画多边形，显示文字 线：line() 矩形：rectangle() 圆：circle() 多边形：polylines() 显示文字：putText() 4.框住并得到目标位置（获取鼠标消息） • setMouseCallback()：回调函数，第一个参数为窗口名，需要自己设计；第二个参数为自己写的函数，在这里我写了一个可以对目标进行框定和位置获取的函数。 **6.图像基础操作：像素、属性、ROI、通道、填充 像素：直接对原图数值进行更改 属性：size、dtype、shape ROI：感兴趣区域 通道：img的第三维的数值 填充：四周填充copyMakeBorder() 7.图像运算：加法、混合 相加：add() 混合：addWeighted()，参数4和参数3表示参数3和参数1的混合比例 9.颜色空间转换 颜色空间转换：cvtColor() 判断像素值是否在某区间：inrange() 10.图像几何变换：扩展缩放、平移、旋转、仿射变换、透视变换 扩展缩放：resize() 仿射变换：warpAffine() 旋转辅助函数：getRotationMatrix2D() 透视变换：getPerspectiveTransform(),warpPerspective() 11.图像二值化：简单阈值，自适应阈值，Otsu阈值 阈值分割：threshold() 自适应阈值：adaptiveThreshold() 12.图像平滑：平均、高斯、中值、双边滤波 滤波：blur() 高斯滤波：GaussianBlur() 中值滤波：medianBlur() 双边滤波：bilateralFilter() 13.图像形态学转换 腐蚀、膨胀、开闭、梯度、礼帽黑帽 img = cv2.imread('xxx.png',0) kernel = np.ones((17,17),np.uint8) # 腐蚀 test1 = cv2.erode(img,kernel=kernel) # 膨胀 test2 = cv2.dilate(img,kernel=kernel) # 开运算 test3 = cv2.morphologyEx(img,cv2.MORPH_OPEN,kernel=kernel) # 闭运算 test4 = cv2.morphologyEx(img,cv2.MORPH_OPEN,kernel=kernel) # 形态学梯度 膨胀-腐蚀 gradient = cv2.morphologyEx(img, cv2.MORPH_GRADIENT, kernel) # 礼帽 原始图像与进行开运算之后得到的图像的差。 tophat = cv2.morphologyEx(img, cv2.MORPH_TOPHAT, kernel) # 黑帽 进行闭运算之后得到的图像与原始图像的差 blackhat = cv2.morphologyEx(img, cv2.MORPH_BLACKHAT, kernel) 14.图像梯度：各种算子 拉普拉斯： Laplacian() Sobel算子：Sobel() Canny算子：Canny() 15.图像金字塔 pyrDown() pyrUp() 16.图像轮廓 找轮廓 findContours 画轮廓 drawContours其他：重心、周长、面积、轮廓近似、凸包、矩阵、最小外接圆、椭圆和直线拟合 17.直方图计算绘制、均衡化、反向投影、2D投影 计算直方图：calcHist() 绘制直方图(pyplot)：hist() 直方图均衡化：equalizeHist() 18.图像变换：傅里叶变换 快速傅里叶变换（np）：fft() 傅里叶变换（opencv）:dft() 19.图像模板匹配 • 模板匹配：matchTemplate() 20.Hough变换 ****Hough 直线变换：****HoughLines() ****Hough 圆环变换：****HoughCircles() 22.GrabCut算法进行交互式前景提取 grabCut() 23.角点检测 角点检测：cornerHarris() 获得n个最佳角点：goodFeaturesToTrack() 24.SIFT算法 SIFT算法利用了尺度不变性来进行图像关键点的提取 25.ORB算法 利用SIFT，ORB算法等一般进行特征匹配","head":[["meta",{"property":"og:url","content":"https://tobeprozy.github.io/03Computer_Vision/Opencv/opencv%E6%A6%82%E8%BF%B0.html"}],["meta",{"property":"og:site_name","content":"南叔先生-开源笔记"}],["meta",{"property":"og:title","content":"Opencv"}],["meta",{"property":"og:description","content":"提示 opencv 1.输入、显示和保存图像 读取：imread() 显示：imshow() 保存：imwrite() 窗口：namedWindow() 2.读取、显示、保存和处理视频 VideoCapture()，参数为0为读取摄像头，参数为文件名读取对应视频文件 3.画线，画圆，画矩形，画多边形，显示文字 线：line() 矩形：rectangle() 圆：circle() 多边形：polylines() 显示文字：putText() 4.框住并得到目标位置（获取鼠标消息） • setMouseCallback()：回调函数，第一个参数为窗口名，需要自己设计；第二个参数为自己写的函数，在这里我写了一个可以对目标进行框定和位置获取的函数。 **6.图像基础操作：像素、属性、ROI、通道、填充 像素：直接对原图数值进行更改 属性：size、dtype、shape ROI：感兴趣区域 通道：img的第三维的数值 填充：四周填充copyMakeBorder() 7.图像运算：加法、混合 相加：add() 混合：addWeighted()，参数4和参数3表示参数3和参数1的混合比例 9.颜色空间转换 颜色空间转换：cvtColor() 判断像素值是否在某区间：inrange() 10.图像几何变换：扩展缩放、平移、旋转、仿射变换、透视变换 扩展缩放：resize() 仿射变换：warpAffine() 旋转辅助函数：getRotationMatrix2D() 透视变换：getPerspectiveTransform(),warpPerspective() 11.图像二值化：简单阈值，自适应阈值，Otsu阈值 阈值分割：threshold() 自适应阈值：adaptiveThreshold() 12.图像平滑：平均、高斯、中值、双边滤波 滤波：blur() 高斯滤波：GaussianBlur() 中值滤波：medianBlur() 双边滤波：bilateralFilter() 13.图像形态学转换 腐蚀、膨胀、开闭、梯度、礼帽黑帽 img = cv2.imread('xxx.png',0) kernel = np.ones((17,17),np.uint8) # 腐蚀 test1 = cv2.erode(img,kernel=kernel) # 膨胀 test2 = cv2.dilate(img,kernel=kernel) # 开运算 test3 = cv2.morphologyEx(img,cv2.MORPH_OPEN,kernel=kernel) # 闭运算 test4 = cv2.morphologyEx(img,cv2.MORPH_OPEN,kernel=kernel) # 形态学梯度 膨胀-腐蚀 gradient = cv2.morphologyEx(img, cv2.MORPH_GRADIENT, kernel) # 礼帽 原始图像与进行开运算之后得到的图像的差。 tophat = cv2.morphologyEx(img, cv2.MORPH_TOPHAT, kernel) # 黑帽 进行闭运算之后得到的图像与原始图像的差 blackhat = cv2.morphologyEx(img, cv2.MORPH_BLACKHAT, kernel) 14.图像梯度：各种算子 拉普拉斯： Laplacian() Sobel算子：Sobel() Canny算子：Canny() 15.图像金字塔 pyrDown() pyrUp() 16.图像轮廓 找轮廓 findContours 画轮廓 drawContours其他：重心、周长、面积、轮廓近似、凸包、矩阵、最小外接圆、椭圆和直线拟合 17.直方图计算绘制、均衡化、反向投影、2D投影 计算直方图：calcHist() 绘制直方图(pyplot)：hist() 直方图均衡化：equalizeHist() 18.图像变换：傅里叶变换 快速傅里叶变换（np）：fft() 傅里叶变换（opencv）:dft() 19.图像模板匹配 • 模板匹配：matchTemplate() 20.Hough变换 ****Hough 直线变换：****HoughLines() ****Hough 圆环变换：****HoughCircles() 22.GrabCut算法进行交互式前景提取 grabCut() 23.角点检测 角点检测：cornerHarris() 获得n个最佳角点：goodFeaturesToTrack() 24.SIFT算法 SIFT算法利用了尺度不变性来进行图像关键点的提取 25.ORB算法 利用SIFT，ORB算法等一般进行特征匹配"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-26T10:25:41.000Z"}],["meta",{"property":"article:tag","content":"Opencv"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:published_time","content":"2023-03-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-26T10:25:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Opencv\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-31T00:00:00.000Z\\",\\"dateModified\\":\\"2023-04-26T10:25:41.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1682504741000,"updatedTime":1682504741000,"contributors":[{"name":"tobeprozy","email":"904762096@qq.com","commits":1}]},"readingTime":{"minutes":2.62,"words":785},"filePathRelative":"03Computer_Vision/Opencv/opencv概述.md","localizedDate":"2023年3月31日","excerpt":"<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>opencv</p>\\n</div>\\n<ul>\\n<li>\\n<p><strong><strong>1.输入、显示和保存图像</strong></strong></p>\\n<ul>\\n<li>读取：imread()</li>\\n<li>显示：imshow()</li>\\n<li>保存：imwrite()</li>\\n<li>窗口：namedWindow()</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong><strong>2.读取、显示、保存和处理视频</strong></strong></p>\\n<p>VideoCapture()，参数为0为读取摄像头，参数为文件名读取对应视频文件</p>\\n</li>\\n<li>\\n<p><strong>3.画线，画圆，画矩形，画多边形，显示文字</strong></p>\\n<ul>\\n<li>线：line()</li>\\n<li>矩形：rectangle()</li>\\n<li>圆：circle()</li>\\n<li>多边形：polylines()</li>\\n<li>显示文字：putText()</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong><strong>4.框住并得到目标位置（获取鼠标消息）</strong></strong></p>\\n<p>• setMouseCallback()：回调函数，第一个参数为窗口名，需要自己设计；第二个参数为自己写的函数，在这里我写了一个可以对目标进行框定和位置获取的函数。</p>\\n</li>\\n<li>\\n<p>**<strong>6.图像基础操作：<a href=\\"https://so.csdn.net/so/search?q=%E5%83%8F%E7%B4%A0&amp;spm=1001.2101.3001.7020\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">像素</a>、属性、ROI、通道、填充</strong></p>\\n<ul>\\n<li>像素：直接对原图数值进行更改</li>\\n<li>属性：size、dtype、shape</li>\\n<li>ROI：感兴趣区域</li>\\n<li>通道：img的第三维的数值</li>\\n<li>填充：四周填充copyMakeBorder()</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong><strong>7.图像运算：加法、混合</strong></strong></p>\\n<ul>\\n<li>相加：add()</li>\\n<li>混合：addWeighted()，参数4和参数3表示参数3和参数1的混合比例</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong><strong>9.颜色空间转换</strong></strong></p>\\n<ul>\\n<li>颜色空间转换：cvtColor()</li>\\n<li>判断像素值是否在某区间：inrange()</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong><strong>10.图像几何变换：扩展缩放、平移、旋转、仿射变换、透视变换</strong></strong></p>\\n<ul>\\n<li>扩展缩放：resize()</li>\\n<li>仿射变换：warpAffine()</li>\\n<li>旋转辅助函数：getRotationMatrix2D()</li>\\n<li>透视变换：getPerspectiveTransform(),warpPerspective()</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong><strong>11.图像二值化：简单阈值，自适应阈值，Otsu阈值</strong></strong></p>\\n<ul>\\n<li>阈值分割：threshold()</li>\\n<li>自适应阈值：adaptiveThreshold()</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong><strong>12.图像平滑：平均、高斯、中值、双边滤波</strong></strong></p>\\n<ul>\\n<li>滤波：blur()</li>\\n<li>高斯滤波：GaussianBlur()</li>\\n<li>中值滤波：medianBlur()</li>\\n<li>双边滤波：bilateralFilter()</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong><strong>13.图像形态学转换</strong></strong></p>\\n<p>腐蚀、膨胀、开闭、梯度、礼帽黑帽</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code>img <span class=\\"token operator\\">=</span> cv2<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">imread</span><span class=\\"token punctuation\\">(</span><span class=\\"token char\\">'xxx.png'</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>\\nkernel <span class=\\"token operator\\">=</span> np<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ones</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">17</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">17</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>np<span class=\\"token punctuation\\">.</span>uint8<span class=\\"token punctuation\\">)</span>\\n# 腐蚀\\ntest1 <span class=\\"token operator\\">=</span> cv2<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">erode</span><span class=\\"token punctuation\\">(</span>img<span class=\\"token punctuation\\">,</span>kernel<span class=\\"token operator\\">=</span>kernel<span class=\\"token punctuation\\">)</span>\\n# 膨胀\\ntest2 <span class=\\"token operator\\">=</span> cv2<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">dilate</span><span class=\\"token punctuation\\">(</span>img<span class=\\"token punctuation\\">,</span>kernel<span class=\\"token operator\\">=</span>kernel<span class=\\"token punctuation\\">)</span>\\n# 开运算\\ntest3 <span class=\\"token operator\\">=</span> cv2<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">morphologyEx</span><span class=\\"token punctuation\\">(</span>img<span class=\\"token punctuation\\">,</span>cv2<span class=\\"token punctuation\\">.</span>MORPH_OPEN<span class=\\"token punctuation\\">,</span>kernel<span class=\\"token operator\\">=</span>kernel<span class=\\"token punctuation\\">)</span>\\n# 闭运算\\ntest4 <span class=\\"token operator\\">=</span> cv2<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">morphologyEx</span><span class=\\"token punctuation\\">(</span>img<span class=\\"token punctuation\\">,</span>cv2<span class=\\"token punctuation\\">.</span>MORPH_OPEN<span class=\\"token punctuation\\">,</span>kernel<span class=\\"token operator\\">=</span>kernel<span class=\\"token punctuation\\">)</span>\\n# 形态学梯度 膨胀<span class=\\"token operator\\">-</span>腐蚀\\ngradient <span class=\\"token operator\\">=</span> cv2<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">morphologyEx</span><span class=\\"token punctuation\\">(</span>img<span class=\\"token punctuation\\">,</span> cv2<span class=\\"token punctuation\\">.</span>MORPH_GRADIENT<span class=\\"token punctuation\\">,</span> kernel<span class=\\"token punctuation\\">)</span>\\n# 礼帽 原始图像与进行开运算之后得到的图像的差。\\ntophat <span class=\\"token operator\\">=</span> cv2<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">morphologyEx</span><span class=\\"token punctuation\\">(</span>img<span class=\\"token punctuation\\">,</span> cv2<span class=\\"token punctuation\\">.</span>MORPH_TOPHAT<span class=\\"token punctuation\\">,</span> kernel<span class=\\"token punctuation\\">)</span>\\n# 黑帽 进行闭运算之后得到的图像与原始图像的差\\nblackhat <span class=\\"token operator\\">=</span> cv2<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">morphologyEx</span><span class=\\"token punctuation\\">(</span>img<span class=\\"token punctuation\\">,</span> cv2<span class=\\"token punctuation\\">.</span>MORPH_BLACKHAT<span class=\\"token punctuation\\">,</span> kernel<span class=\\"token punctuation\\">)</span>\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p><strong><strong>14.图像梯度：各种算子</strong></strong></p>\\n<ul>\\n<li>拉普拉斯： Laplacian()</li>\\n<li>Sobel算子：Sobel()</li>\\n<li>Canny算子：Canny()</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong><strong>15.图像金字塔</strong></strong></p>\\n<ul>\\n<li>pyrDown()</li>\\n<li>pyrUp()</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong><strong>16.图像轮廓</strong></strong></p>\\n<ul>\\n<li>找轮廓 findContours</li>\\n<li>画轮廓 drawContours其他：重心、周长、面积、轮廓近似、凸包、矩阵、最小外接圆、椭圆和直线拟合</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong><strong>17.直方图计算绘制、均衡化、反向投影、2D投影</strong></strong></p>\\n<ul>\\n<li>计算直方图：calcHist()</li>\\n<li>绘制直方图(pyplot)：hist()</li>\\n<li>直方图均衡化：equalizeHist()</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong><strong>18.图像变换：傅里叶变换</strong></strong></p>\\n<ul>\\n<li>快速傅里叶变换（np）：fft()</li>\\n<li>傅里叶变换（opencv）:dft()</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong><strong>19.图像模板匹配</strong></strong></p>\\n<p>• 模板匹配：matchTemplate()</p>\\n</li>\\n<li>\\n<p><strong><strong>20.Hough变换</strong></strong></p>\\n<p>****Hough 直线变换：****HoughLines() ****Hough 圆环变换：****HoughCircles()</p>\\n</li>\\n<li>\\n<p><strong><strong>22.GrabCut算法进行交互式前景提取</strong></strong></p>\\n<p>grabCut()</p>\\n</li>\\n<li>\\n<p><strong><strong>23.角点检测</strong></strong></p>\\n<ul>\\n<li>角点检测：cornerHarris()</li>\\n<li>获得n个最佳角点：goodFeaturesToTrack()</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong><strong>24.SIFT算法</strong></strong></p>\\n<p>SIFT算法利用了尺度不变性来进行图像关键点的提取</p>\\n</li>\\n<li>\\n<p><strong><strong>25.ORB算法</strong></strong></p>\\n<p>利用SIFT，ORB算法等一般进行特征匹配</p>\\n</li>\\n</ul>","autoDesc":true}`);export{n as data};
