import{_ as l,Y as o,Z as p,$ as n,a0 as s,a1 as i,a2 as a,D as e}from"./framework-39b9cf04.js";const c={},r=n("div",{class:"hint-container tip"},[n("p",{class:"hint-container-title"},"提示"),n("p",null,"opencv")],-1),u=a("<li><p><strong><strong>1.输入、显示和保存图像</strong></strong></p><ul><li>读取：imread()</li><li>显示：imshow()</li><li>保存：imwrite()</li><li>窗口：namedWindow()</li></ul></li><li><p><strong><strong>2.读取、显示、保存和处理视频</strong></strong></p><p>VideoCapture()，参数为0为读取摄像头，参数为文件名读取对应视频文件</p></li><li><p><strong>3.画线，画圆，画矩形，画多边形，显示文字</strong></p><ul><li>线：line()</li><li>矩形：rectangle()</li><li>圆：circle()</li><li>多边形：polylines()</li><li>显示文字：putText()</li></ul></li><li><p><strong><strong>4.框住并得到目标位置（获取鼠标消息）</strong></strong></p><p>• setMouseCallback()：回调函数，第一个参数为窗口名，需要自己设计；第二个参数为自己写的函数，在这里我写了一个可以对目标进行框定和位置获取的函数。</p></li>",4),g={href:"https://so.csdn.net/so/search?q=%E5%83%8F%E7%B4%A0&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},k=n("ul",null,[n("li",null,"像素：直接对原图数值进行更改"),n("li",null,"属性：size、dtype、shape"),n("li",null,"ROI：感兴趣区域"),n("li",null,"通道：img的第三维的数值"),n("li",null,"填充：四周填充copyMakeBorder()")],-1),d=a(`<li><p><strong><strong>7.图像运算：加法、混合</strong></strong></p><ul><li>相加：add()</li><li>混合：addWeighted()，参数4和参数3表示参数3和参数1的混合比例</li></ul></li><li><p><strong><strong>9.颜色空间转换</strong></strong></p><ul><li>颜色空间转换：cvtColor()</li><li>判断像素值是否在某区间：inrange()</li></ul></li><li><p><strong><strong>10.图像几何变换：扩展缩放、平移、旋转、仿射变换、透视变换</strong></strong></p><ul><li>扩展缩放：resize()</li><li>仿射变换：warpAffine()</li><li>旋转辅助函数：getRotationMatrix2D()</li><li>透视变换：getPerspectiveTransform(),warpPerspective()</li></ul></li><li><p><strong><strong>11.图像二值化：简单阈值，自适应阈值，Otsu阈值</strong></strong></p><ul><li>阈值分割：threshold()</li><li>自适应阈值：adaptiveThreshold()</li></ul></li><li><p><strong><strong>12.图像平滑：平均、高斯、中值、双边滤波</strong></strong></p><ul><li>滤波：blur()</li><li>高斯滤波：GaussianBlur()</li><li>中值滤波：medianBlur()</li><li>双边滤波：bilateralFilter()</li></ul></li><li><p><strong><strong>13.图像形态学转换</strong></strong></p><p>腐蚀、膨胀、开闭、梯度、礼帽黑帽</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>img <span class="token operator">=</span> cv2<span class="token punctuation">.</span><span class="token function">imread</span><span class="token punctuation">(</span><span class="token char">&#39;xxx.png&#39;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>
kernel <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token function">ones</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>
# 腐蚀
test1 <span class="token operator">=</span> cv2<span class="token punctuation">.</span><span class="token function">erode</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span>kernel<span class="token operator">=</span>kernel<span class="token punctuation">)</span>
# 膨胀
test2 <span class="token operator">=</span> cv2<span class="token punctuation">.</span><span class="token function">dilate</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span>kernel<span class="token operator">=</span>kernel<span class="token punctuation">)</span>
# 开运算
test3 <span class="token operator">=</span> cv2<span class="token punctuation">.</span><span class="token function">morphologyEx</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>MORPH_OPEN<span class="token punctuation">,</span>kernel<span class="token operator">=</span>kernel<span class="token punctuation">)</span>
# 闭运算
test4 <span class="token operator">=</span> cv2<span class="token punctuation">.</span><span class="token function">morphologyEx</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>MORPH_OPEN<span class="token punctuation">,</span>kernel<span class="token operator">=</span>kernel<span class="token punctuation">)</span>
# 形态学梯度 膨胀<span class="token operator">-</span>腐蚀
gradient <span class="token operator">=</span> cv2<span class="token punctuation">.</span><span class="token function">morphologyEx</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>MORPH_GRADIENT<span class="token punctuation">,</span> kernel<span class="token punctuation">)</span>
# 礼帽 原始图像与进行开运算之后得到的图像的差。
tophat <span class="token operator">=</span> cv2<span class="token punctuation">.</span><span class="token function">morphologyEx</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>MORPH_TOPHAT<span class="token punctuation">,</span> kernel<span class="token punctuation">)</span>
# 黑帽 进行闭运算之后得到的图像与原始图像的差
blackhat <span class="token operator">=</span> cv2<span class="token punctuation">.</span><span class="token function">morphologyEx</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>MORPH_BLACKHAT<span class="token punctuation">,</span> kernel<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong><strong>14.图像梯度：各种算子</strong></strong></p><ul><li>拉普拉斯： Laplacian()</li><li>Sobel算子：Sobel()</li><li>Canny算子：Canny()</li></ul></li><li><p><strong><strong>15.图像金字塔</strong></strong></p><ul><li>pyrDown()</li><li>pyrUp()</li></ul></li><li><p><strong><strong>16.图像轮廓</strong></strong></p><ul><li>找轮廓 findContours</li><li>画轮廓 drawContours其他：重心、周长、面积、轮廓近似、凸包、矩阵、最小外接圆、椭圆和直线拟合</li></ul></li><li><p><strong><strong>17.直方图计算绘制、均衡化、反向投影、2D投影</strong></strong></p><ul><li>计算直方图：calcHist()</li><li>绘制直方图(pyplot)：hist()</li><li>直方图均衡化：equalizeHist()</li></ul></li><li><p><strong><strong>18.图像变换：傅里叶变换</strong></strong></p><ul><li>快速傅里叶变换（np）：fft()</li><li>傅里叶变换（opencv）:dft()</li></ul></li><li><p><strong><strong>19.图像模板匹配</strong></strong></p><p>• 模板匹配：matchTemplate()</p></li><li><p><strong><strong>20.Hough变换</strong></strong></p><p>****Hough 直线变换：****HoughLines() ****Hough 圆环变换：****HoughCircles()</p></li><li><p><strong><strong>22.GrabCut算法进行交互式前景提取</strong></strong></p><p>grabCut()</p></li><li><p><strong><strong>23.角点检测</strong></strong></p><ul><li>角点检测：cornerHarris()</li><li>获得n个最佳角点：goodFeaturesToTrack()</li></ul></li><li><p><strong><strong>24.SIFT算法</strong></strong></p><p>SIFT算法利用了尺度不变性来进行图像关键点的提取</p></li><li><p><strong><strong>25.ORB算法</strong></strong></p><p>利用SIFT，ORB算法等一般进行特征匹配</p></li>`,17);function v(m,h){const t=e("ExternalLinkIcon");return o(),p("div",null,[r,n("ul",null,[u,n("li",null,[n("p",null,[s("**"),n("strong",null,[s("6.图像基础操作："),n("a",g,[s("像素"),i(t)]),s("、属性、ROI、通道、填充")])]),k]),d])])}const b=l(c,[["render",v],["__file","opencv概述.html.vue"]]);export{b as default};
