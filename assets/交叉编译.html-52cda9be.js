import{_ as a,Y as s,Z as e,a2 as n}from"./framework-39b9cf04.js";const i="/assets/1-6432c7c0.png",r="/assets/2-0705f90d.png",l="/assets/3-59da0bde.png",d="/assets/4-92203392.png",o="/assets/6-fc42d9bb.png",p="/assets/7-c6a3edef.png",c="/assets/8-5807b0a0.png",t="/assets/9-e1ece861.png",v="/assets/10-e8d948e3.png",m="/assets/11-54d1f165.png",_="/assets/13-25f79cac.png",u="/assets/15-c08de5ec.png",h="/assets/17-c5148ea6.png",k={},b=n('<h3 id="一、交叉编译概念" tabindex="-1"><a class="header-anchor" href="#一、交叉编译概念" aria-hidden="true">#</a> 一、交叉编译概念</h3><p>在设备A下开发编译的程序，放到设备B上运行</p><h3 id="二、开发步骤" tabindex="-1"><a class="header-anchor" href="#二、开发步骤" aria-hidden="true">#</a> 二、开发步骤</h3><p>查看系统版本 cat /proc/version!</p><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_2-1-下载docker镜像和sdk" tabindex="-1"><a class="header-anchor" href="#_2-1-下载docker镜像和sdk" aria-hidden="true">#</a> 2.1 下载docker镜像和sdk</h4><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>复制下载链接和并用wget下载 <img src="'+l+'" alt="" loading="lazy"></p><p>查看本机docker版本 docker version <img src="'+d+`" alt="" loading="lazy"> 如果没有找到docker，则需要重新安装一下 具体安装如下：</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code># 安装docker
 sudo apt-get install docker.io
 # docker命令免root权限执行
 # 创建docker用户组，若已有docker组会报错，没关系可忽略
 sudo groupadd docker
 # 将当前用户加入docker组
 sudo gpasswd -a \${USER} docker
 # 重启docker服务
 sudo service docker restart
# 切换当前会话到新group或重新登录重启X会话
 newgrp docker​
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-更新" tabindex="-1"><a class="header-anchor" href="#_2-2-更新" aria-hidden="true">#</a> 2.2 更新</h4><p>sudo apt update</p><h4 id="_2-3安装解压缩工具unzip-并解压sdk" tabindex="-1"><a class="header-anchor" href="#_2-3安装解压缩工具unzip-并解压sdk" aria-hidden="true">#</a> 2.3安装解压缩工具unzip,并解压sdk</h4><p>sudo install unzip</p><p>unzip x8...</p><h4 id="_2-4-加载docker镜像" tabindex="-1"><a class="header-anchor" href="#_2-4-加载docker镜像" aria-hidden="true">#</a> 2.4 加载docker镜像</h4><p>ls cd x86_sophonsdk3_ubuntu18.04_py37_dev_22.06_docker/ docker load -i x86_sophonsdk3_ubuntu18.04_py37_dev_22.06.docker</p><p>退回到sdk目录 cd .. cd sophonsdk_v3.0.0_20220716/</p><figure><img src="`+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>运行./docker_run_sophonsdk.sh</p><p>运行完成之后就进入了docker容器中，可以看到这边的目录就是挂载的sdk目录，通过目录映射实现的 <img src="'+p+'" alt="" loading="lazy"></p><h4 id="_2-5-配置环境" tabindex="-1"><a class="header-anchor" href="#_2-5-配置环境" aria-hidden="true">#</a> 2.5 配置环境</h4><p>继续安装依赖库 <img src="'+c+'" alt="" loading="lazy"></p><p>继续配置环境变量 source envsetup_cmodel.sh</p><p>然后安装python对应版本的shell包 <img src="'+t+'" alt="" loading="lazy"> pip3 install ../lib/sail/python3/pcie/py37/sophon-3.0.0-py3-none-any.whl --user <img src="'+v+'" alt="" loading="lazy"> 交叉编译环境搭建完成</p><h4 id="_2-6-编写程序" tabindex="-1"><a class="header-anchor" href="#_2-6-编写程序" aria-hidden="true">#</a> 2.6 编写程序</h4><p><img src="'+m+'" alt="" loading="lazy"><img src="'+_+`" alt="" loading="lazy"> 然后编写Makefile.arm文件 vim Makefile.arm</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>CXX <span class="token operator">=</span> aarch64-linux-gnu-g++
  
CXXFLAGS :<span class="token operator">=</span> <span class="token parameter variable">-g</span> <span class="token parameter variable">-O2</span> <span class="token parameter variable">-Wall</span> <span class="token parameter variable">-std</span><span class="token operator">=</span>c++11 <span class="token variable"><span class="token variable">$(</span>INC_DIR<span class="token variable">)</span></span>
LOCAL_MEM_ADDRWIDTH         ?<span class="token operator">=</span> <span class="token number">19</span>

CXXFLAGS <span class="token operator">+=</span> <span class="token parameter variable">-DCONFIG_LOCAL_MEM_ADDRWIDTH</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>LOCAL_MEM_ADDRWIDTH<span class="token variable">)</span></span>

all: helloworld.arm

helloworld.arm: helloworld.cpp
        <span class="token variable"><span class="token variable">$(</span>CXX<span class="token variable">)</span></span> $^ <span class="token variable"><span class="token variable">$(</span>CXXFLAGS<span class="token variable">)</span></span> <span class="token variable"><span class="token variable">$(</span>LDLIBS<span class="token variable">)</span></span> <span class="token variable"><span class="token variable">$(</span>LDFLAGS<span class="token variable">)</span></span> <span class="token parameter variable">-o</span> <span class="token variable">$@</span>
clean:
        <span class="token function">rm</span> <span class="token parameter variable">-f</span> helloworld.arm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译： make -f Makefile.arm <img src="`+u+'" alt="" loading="lazy"></p><p>可以看到生成了一个helloworld.arm文件，这个文件就可以在SE环境下执行，可以把这个可执行文件拷贝到目标主机，假设目标主机的动态ip为：116.204.4.93，主机名为root，那么拷贝命令如下： scp helloworld.arm <a href="mailto:admin@116.204.4.93">admin@116.204.4.93</a>:/home <img src="'+h+'" alt="" loading="lazy"></p><p>在目标主机上运行： ./helloworld.arm就可以打印“hello，world！”</p>',31),g=[b];function f(x,y){return s(),e("div",null,g)}const D=a(k,[["render",f],["__file","交叉编译.html.vue"]]);export{D as default};
