import{_ as t,Y as e,Z as o,$ as n,a0 as s,a1 as c,a2 as a,D as l}from"./framework-d651fda7.js";const i={},r=a('<div class="hint-container tip"><p class="hint-container-title">提示</p><p>计算机重要知识</p></div><h1 id="计算机重要知识" tabindex="-1"><a class="header-anchor" href="#计算机重要知识" aria-hidden="true">#</a> 计算机重要知识</h1><p>Created: September 15, 2022 8:35 AM</p><h3 id="进制计算" tabindex="-1"><a class="header-anchor" href="#进制计算" aria-hidden="true">#</a> 进制计算</h3><p><strong>1、二进制转十进制：</strong></p><blockquote><p>例如二进制的：101001转换过程：1<em>2<sup>0+0*2</sup>1+0</em>2<sup>2+1*2</sup>3+0*2<sup>4+1*2</sup>5=1+8+32=41结果：41</p></blockquote><p><strong>2、十进制转二进制：</strong></p><blockquote><p>用辗转法将十进制转换成二进制：例如十进制的：41</p><p>41/2=20---1,</p><p>20/2=10---0,</p><p>10/2=5----0,</p><p>5/2  =2----1,</p><p>2/2  =2----0,</p><p>1/2  =1----1;</p><p>二进制的结果（自下向上组合）：101001</p></blockquote><p>3、<strong>十进制转十六进制：</strong></p><blockquote><p>第一步先十进制转成二进制，第二步再二进制转16进制例如： 45第一步十进制转成二进制： 45/2=22...1</p><p>22/2=11...0 11/2=5.....1 5/2=2.......1 2/2=1.......0 1/2=1.......1 二进制为：101101 检验结果是否正确：1<em>2<sup>0+1*2</sup>2+1</em>2<sup>3+1*2</sup>5=1+4+8+32=45</p><p>第二步二进制转16进制: 10 1101 十六进制得出最终结果为：2D</p></blockquote><p>.4、<strong>十六进制转十进制：</strong></p><blockquote><p>十六进制：2AF(F) 15<em>16<sup>0+(A)10*16</sup>1+2</em>16^2=15+160+512=687 故此：687</p></blockquote><p>5、<strong>二进制转十六进制：</strong></p><blockquote><p>四个一位 不够前面补0：例如100010</p><p>0010 0010 2       2  十六进制等于：22</p></blockquote><p>6、<strong>十六进制转二进制：</strong></p><blockquote><p>右至左 22故此：100010</p><p>CE C        E  (C=12,E=14 ) 1100   1110  二进制结果为：11001110</p></blockquote><p>7、<strong>八进制转十六进制：</strong></p><blockquote><p>第一步先八进制转成二进制，第二步再二进制转16进制 例如 24第一步：二进制（三位一个自右到左分隔）：10 100   得到：10100第二步：16进制（四位一个自右到左分隔）：1 0100</p><p>十六进制为：14</p></blockquote><p>8、<strong>十六进制转八进制：</strong></p><blockquote><p>步骤：1.十六进制先转成二进制 二进制再转八进制 （自右向左三位一个） 例如：2AF第一步            2   A        F          10 1010  1111</p><p>第二步</p><p>(00)1 010 101 111</p><p>1      2     5    7</p><p>八进制结果为：1257</p></blockquote><p>9、<strong>二进制转八进制(取三合一法，即从二进制的小数点为分界点，向左（向右）每三位取成一位)</strong></p><blockquote><p>将二进制数101110.101转换为八进制 101 110 101 5 6 5</p><p>得到结果：56.5</p></blockquote><p>10、<strong>八进制转二进制（八进制的数字是0~7，大于7的不符合八进制的要求，逢八进一）：</strong></p><blockquote><p>例如八进制的 7.11 7     1     1 111 001 001一位变成三位 二进制结果为：111.001001</p></blockquote><h3 id="补码计算" tabindex="-1"><a class="header-anchor" href="#补码计算" aria-hidden="true">#</a> 补码计算：</h3>',25),u={href:"https://www.baidu.com/link?url=2zCVQ2cjUejJrzc0AXkeS6GLw4DGxkZ4KH7xEe15AF2EWty_ku4kIELKF3LQ3dlMRSb6Z3kvG0NB9g0bpc7LVq&wd=&eqid=c3bee9020026874f00000003632277f0",target:"_blank",rel:"noopener noreferrer"},d=n("em",null,"还是补码",-1),k=n("strong",null,"补码",-1),g=a(`<p><strong>原码的求解规则：</strong></p><p>正数：就是它对应的二进制数。</p><p>负数：将绝对值对应的二进制最左边位变为1。</p><p>所以-11的原码就是<strong>1</strong>0001011。</p><p>备注：最左边是符号位，0表示正数，1表示负数，下同。</p><p><strong>反码的求解规则：</strong></p><p>正数：和原码相同，也就是对应的二进制数。</p><p>负数：将原码符号位之外的数字取反，即0变1，1为0。</p><p>所以-11的反码是<strong>1</strong>1110100</p><p><strong>补码的求解规则：</strong></p><p>正数：和反码相同，也就是对应的二进制数。</p><p>负数：将反码的最后一位加1。</p><p>所以-11的补码就是<strong>1</strong>111010<strong>1</strong></p><p>知识要点：</p><p>1、十进制转二进制是根本</p><p>2、8位表示，最左边0代表正，1代表负</p><p>3、正数原、反、补相同</p><p>4、从原到反再到补，逐步求解不要乱</p><h3 id="重载、重写、隐藏" tabindex="-1"><a class="header-anchor" href="#重载、重写、隐藏" aria-hidden="true">#</a> 重载、重写、隐藏</h3><p>1、重载指在同一范围定义中的同名成员函数才存在重载关系。主要特点是函数名相同，参数类型和数目有所不同。</p><p>2、重写指的是在派生类中覆盖基类中的同名函数，<strong>重写就是重写函数体</strong>，<strong>要求基类函数必须是虚函数</strong>且：</p><ul><li>与基类的虚函数有相同的参数个数</li><li>与基类的虚函数有相同的参数类型</li><li>与基类的虚函数有相同的返回值类型</li></ul><p>3、隐藏：</p><ul><li>两个函数参数相同，但是基类函数不是虚函数。此时隐藏和重写的区别在于基类函数是否是虚函数</li><li><strong>两个函数参数不同，无论基类函数是不是虚函数，都会被隐藏。和重载的区别在于两个函数不在同一个类中</strong></li></ul><h3 id="c-中-和-和-和-的区别" tabindex="-1"><a class="header-anchor" href="#c-中-和-和-和-的区别" aria-hidden="true">#</a> c++中.和-&gt;和::和:的区别</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>A<span class="token punctuation">.</span>B<span class="token punctuation">,</span>则A为对象或者结构体；

A<span class="token operator">-&gt;</span>B<span class="token punctuation">,</span>则A为指针，<span class="token operator">-&gt;</span>是成员提取，A<span class="token operator">-&gt;</span>B是提取A中的成员B，A只能是指向类、结构、联合的指针；

<span class="token double-colon punctuation">::</span>是作用域运算符，A<span class="token double-colon punctuation">::</span>B表示作用域A中的名称B，A可以是名字空间、类、结构；

<span class="token operator">:</span>一般用来表示继承；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><aside> 🪁 一般情况下用“.”，只需要声明一个结构体。格式是，结构体类型名+结构体名。然后用结构体名加“.”加域名就可以引用域 了。因为自动分配了结构体的内存。如同 int a;一样。 而用“-&gt;”，则要声明一个结构体的指针，还要手动开辟一个该结构体的内存，然后把返回的指针给声明的结构体指针，才能用“-&gt;”正确引用。否则内存中只分配了指针的内存，没有分配结构体的内存，导致想要的结构体实际上是不存在。这时候用“-&gt;”引用自然出错了，因为没有结构体，自然没有结构体的域了。 </aside><h3 id="c-类中的构造函数" tabindex="-1"><a class="header-anchor" href="#c-类中的构造函数" aria-hidden="true">#</a> c++类中的构造函数</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//默认构造函数，没有参数</span>
        <span class="token keyword">this</span><span class="token operator">-&gt;</span>age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token operator">-&gt;</span>num <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>  
    <span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">age</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">num</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//初始化构造函数，有参数和参数列表</span>
    <span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">const</span> Student<span class="token operator">&amp;</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//拷贝构造函数，这里与编译器生成的一致</span>
        <span class="token keyword">this</span><span class="token operator">-&gt;</span>age <span class="token operator">=</span> s<span class="token punctuation">.</span>age<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token operator">-&gt;</span>num <span class="token operator">=</span> s<span class="token punctuation">.</span>num<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span> 

  <span class="token comment">//定义了一个赋值构造函数</span>
	Student<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Student<span class="token operator">&amp;</span> stu<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">//转换构造函数,形参是其他类型变量，且只有一个形参</span>
        <span class="token keyword">this</span><span class="token operator">-&gt;</span>age <span class="token operator">=</span> r<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token operator">-&gt;</span>num <span class="token operator">=</span> <span class="token number">1002</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">int</span> num<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>默认构造函数和初始化构造函数</strong>在定义类的对象，完成对象的初始化工作</li><li><strong>复制构造函数用于复制本类的对象</strong></li><li><strong>转换构造函数用于将其他类型的变量</strong>，隐式转换为本类对象</li></ul><h3 id="深拷贝和浅拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝和浅拷贝" aria-hidden="true">#</a> 深拷贝和浅拷贝</h3><p><strong>浅拷贝</strong></p><p>浅拷贝只是拷贝一个指针，并没有新开辟一个地址，拷贝的指针和原来的指针指向同一块地址，如果原来的指针所指向的资源释放了，那么再释放浅拷贝的指针的资源就会出现错误。</p><p><strong>深拷贝</strong></p><p>深拷贝不仅拷贝值，还开辟出一块新的空间用来存放新的值，即使原先的对象被析构掉，释放内存了也不会影响到深拷贝得到的值。在自己实现拷贝赋值的时候，如果有指针变量的话是需要自己实现深拷贝的。</p>`,35);function m(b,v){const p=l("ExternalLinkIcon");return e(),o("div",null,[r,n("p",null,[s("*"),n("a",u,[s("计算机存储的是原码*、反码、"),d,s("?"),c(p)]),k]),g])}const _=t(i,[["render",m],["__file","计算机基础知识.html.vue"]]);export{_ as default};
